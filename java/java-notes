实例方法和类方法。
实例方法可以操作实例变量和类变量。
类方法不仅可以通过类名调用，也可以通过实例对象调用。类方法不可以操作实例变量。

Java 两种多态
方法重载(overload)
方法名字相同，但是：
参数的个数不同，
参数个数相同，但参数列表中对应的某个参数类型不同。

this 关键字可以出现在构造方法和实例方法，不可以出现在类方法中。this 出现在构造方法表示该构造方法创建的对象。出现在实例方法表示正在调用该方法的当前对象。
this 不能出现在类方法中：类方法可以通过类名调用，这时可能还没有任何对象产生。

包
Lader.java
package name.misc;

public class Lader{
    double x, y, z;
    Lader(x, y, z){
        this.x = x;
        this.y = y;
        this.z = z;
    }
    double sum(){
        return x + y + z;
    }

}
然后写一个包含主类的源文件 Example.java
package name.misc;

这里直接使用 Lader 类(同目录的命名包内)。这两个文件都位于 name/misc 目录内。在顶级目录编译 javac name/misc/*.java, 运行 java name.misc.Example 。
导入包： 在顶级目录编写包含主类的 Example2.java 
import name.misc.Lader;
就可以使用别的包内的类。

访问权限
针对对象是否可以操作变量和调用方法。
在类中，实例方法总是可以操作实例变量和类变量。类方法总是可以操作类变量。

私有变量和私有方法 private 修饰
创建这样的对象后，该对象不能操作自己的变量。包括使用实例操作实例变量和类变量，使用类名调用类方法和操作类变量。

共有变量和共有方法 public
在别的类中创建这样的对象，可以自由使用该对象操作变量和调用方法。

友好变量和友好方法，不使用 public, private, protected 修饰
如果在同一个包中的类中创建这样的对象，效果等同于 public
不在同一个包中的类中，比如 import 引入的其他包中类创建的对象，不能访问自己的变量和方法。

受保护的成员变量和方法
与友好相似，在子类上不同

public 类和友好类
public class A{...}，称为 public 类，可以在任何一个类中使用该 public 类创建对象。
无修饰的类 class B{...} 称为友好类，可以使用该类在别的类中创建对象，只有别的类和该类在同一个包中。
类不可以使用 protected 和 private 修饰。

基本数据类型的类封装
Doubel, Float 类
Byte, Short, Integer, Long, Character 类。 

对象数组
Student [] stu;
stu = new Student[10];
stu[0] = new Student();

反编译和文档生成器
javap java.awt.Button // public 属性的方法和变量。
javap -private java.awt.Button // 全部

javadoc -d <dir> Example.java //生成文档

使用 java 运行环境扩展中类
使用 jar 将一些类的字节码文件压缩成一个 jar 文件，放到 jre/lib/ext 目录使用。
1. 有包名的类
先生成字节码。然后在顶级目录编写 Manifest 文件，比如
Manifest-Version: 1.0
Class: name.misc.TestOne name.misc.TestTwo
Created-By: 1.6
生成 jar 文件。 jar cfm hello.jar hello.mf name/misc/*.class
放到 ext 目录。别的源文件 import 使用。
2. 无包名的类
步骤相似。无须 import



// liaoxuefeng

子类覆写的方法可以通过 super 调用。
super.foo()

final 继承允许子类覆写父类的方法，如果父类不允许子类对其某个方法覆写，可以使用 final 修饰。

如果一个类不允许其他类继承自他，可以使用 final 修饰。
final class Person
final 修饰的变量初始化后不可修改。
可以在构造方法中初始化 final 字段
class Person{
    private final String name;
    public Person(String name){
        this.name = name;
    }
}

一个构造方法可以调用别的构造方法。语法是 this(...)
class People{
    String name;
    int age;

    public People(String name, int age){
        this.name = name;
        this.age = age;
    }

    public People(String name){
        this(name, 18);
    }

    public People(){
        this("Unamed");
    }
}

super 关键字
class Person{
    protected String name;
    protected int age;

    public Person(String name, int age){
        this.name = name;
        this.age = age;
    }
}

class Student extends Person{
    protected double score;

    public Student(String name, int age, double score){
        super(name, age); // 调用父类的构造方法。 如无明确指明，调用 super();
        this.score = score;
    }
}

向上转型
Person p = new Student(); // upcasting
向下转型 downcasting
p instanceof P -> true, false // 判断类型, null 对任何类型的判断都是 false.

继承和组合 is, has 关系

@override //放在希望覆写的方法之前。编译器会帮忙检查。
上转型对象调用被覆写的方法，实际调用覆写的方法。
如：
Person p = new Student();
p.run(); // Student run

在Java中，如果父类中含有一个静态方法，且在子类中也含有一个返回类型、方法名、参数列表均与之相同的静态方法，那么该子类实际上只是将父类中的该同名方法进行了隐藏，而非重写。
ex: 结果 3.0
public class Main{
	public static void main(String[] args){
		A a = new B();
		System.out.println(a.getNum());
	}	
}

class A{
	public static float getNum(){
		return 3.0f;
	}
}

class B extends A{
	public static float getNum(){
		return 4.0f;
	}
}
多态的特性就是，运行期才能动态决定调用的子类方法。对某个类型调用某个方法，执行的实际方法可能是某个子类的覆写方法。

如果一个类的某个方法目的就是让子类覆写它，那么可以用 abstract 修饰，这个方法要写出方法头，实现由子类实现。同时该父类也不能实例化，所以也要 abstract 修饰。 

面向抽象编程：
Person s = new Student();
Person t = new Teacher();
s.run();
t.run();
引用高层类型，避免引用实际子类型的方式。
特点：
上层代码只定义规范
不需要子类就可以实现业务逻辑（正常编译）
具体的业务逻辑由不同的子类实现。

当一个类的所有方法都是抽象方法时，可以把该抽象类改写为接口
接口定义： 接口声明和接口体
接口体包含常量的声明（没有变量）和抽象方法两部分（没有普通方法）常量均为 public static final (修饰符允许省略)，方法均为 public abstract(允许省略)
接口中的常量必须显式初始化。
接口中的静态方法：java版本不同标准不同
interface Person{
    int MAX; // public final static int MAX;
    void run(); // public abstract void run();
}

一个类可以实现多个接口
class Student implements Person, Hello{
    ...
}
一个非抽象类实现了某个接口，要重写这个接口的所有方法。接口方法的修饰符是 public abstract，实现类的方法去掉 abstract，而且要明确指明 public.
在别的类中，可以直接使用接口的常量 Person.NUMBER（static 特性） // int NUMBER

如果一个类声明实现了一个接口，但没有重写所有的方法，那么这个类必须是抽象类。

public 修饰的接口可以被任何类实现，不修饰的接口只能被同一个包中的类实现。

如果父类实现了某个接口，那么其子类自然实现了该接口，不必显示声明实现了该接口 class SonClass implements...

接口也可以被继承，子接口继承所有的常量的抽象方法。 // public

接口回调
接口作为一个引用型数据类型，可以创建接口变量。该变量可以存放实现了该接口的类的实例的引用。该变量可以调用类中实现的接口方法，不可以调用非接口方法。

抽象类可以定义变量，interface 不可以定义变量。
抽象类可以定义抽象方法和非抽象方法。interface 可以定义抽象方法和 default 方法。

interface 的 default 方法在 interface 中实现。这样在 interface 类中增加方法，实现 interface 的类无需改变。

静态字段属于类的字段，为所有的实例所共享。不推荐使用实例访问静态字段。实例能够访问静态字段只是因为编译器可以根据实例类型转换为类名来访问静态对象。

静态方法属于 class，静态方法内部不能访问　this　变量，也无法访问非静态字段。通过实例变量也可以调用静态方法，不过只是编译器自动帮我们把实例改写为类名。
静态方法经常用于工具类.
Array.sort()
Math.random()

interface 虽然不能有实例字段,但是可以有 static final 字段.
public interface Person{
    public static final int MALE = 1; // 可以省略 public static final
    public static final int FEMALE = 1;
}


import 语句三种写法
1. 写完整报名，此时不用 import
2. import 某个类，然后直接使用
* 表示包下所有的类，不包括子包的类。
3. import static java.lang.System.*; // 导入 System 类的所有静态字段和方法。

自动导入： 当前包的其他类。java.lang 包

作用域：
public: class, interface 可以被其他任何类访问。field, method 可以被其他类访问，前提是有访问 class 的权限。

private： field, method 无法被其他类访问。嵌套类可以访问 private field, method.

protected 作用与继承关系。定义为 protected 的字段和方法可以被子类访问，包括子类的子类。

包作用域是指一个类允许访问同一个包的没有 public, private 修饰的 class, 以及没有 public, protected, private 修饰的字段和方法。

局部变量：方法内部定义的变量称为局部变量。

final: 
修饰类，阻止被继承。
修饰方法，阻止被子类覆写
修饰字段，阻止被修改
修饰局部变量阻止被修改。

一个 .java 文件只能包含一个 public 类，但可以包含多个非 public 类。如果有 public 类，文件名必须和 public 类的名字相同。

classpath 类路径，指定搜索类的路径的环境变量
不推荐在系统环境变量中设置 classpath，这样会污染整个环境。推荐 JVM 启动时传入 -classpath, -cp 参数。 
没有设置环境变量或者没有传入参数， java 默认的 classpath 为当前目录。
如执行 java name.misc.Hello， 会搜索 ./name/misc/Hello.class 字节码。
java 核心库不需要设置 classpath.

java -cp ./hello.jar abc.xyz.Hello
会在 hello.jar 中搜寻 Hello 类。
jar 就是一个 zip 包，可以使用 zip 打包然后修改扩展名
MANIFEST.MF 指定 Main-Class 和其他信息，大型项目可以使用 Maven 构建工具。

内部类与外嵌类
内部类可以使用外嵌类的变量和方法。内部类的类体不可以声明类变量和类方法。外嵌类可以使用内部类声明对象，作为其成员。
static 修饰的内部类可以在程序的其他类使用，static 内部类不能操作外嵌类中的实例变量。
非内部类不可以是 static 类。

匿名类
匿名类可以继承父类的方法和重写方法。
匿名类是内部类，可以访问外嵌类的变量和方法，不可以有静态变量和方法。。
匿名类要直接使用父类的构造方法。

和接口有关的匿名类。必须实现接口的全部方法。

### 异常类
语法：
try{
    ...
}
catch(Exception e){
    ...
}
finally{
    ...
}

自定义异常类
// Cust_class.java
class Cust_class extends Exception{
    // Constuctor...
}
// class we will use, method in this class will throw customized exception.
void method_1 throws Cust_class{
    if...
        throw new Cust_class(...) // 创建异常类, 方法结束
    ...
}
// mainClass
try{
    method_1(); // call method that may throw exception
}


### 断言
assert booleanExpression:msg， 值为 false， 输出 msg 
启用与关闭断言语句。默认关闭，启用： java -ea mainClass


### 常用实用类
String 类的常用方法：
1. public int length()
2. public boolean equals(String s) equalsIgnoreCase(String s)
3. public boolean startsWith(String s) endsWith(String s)
4. public int compareTo(String s), compareToIgnoreCase(String s)
5. public boolean contains(String s)
6. public int indexOf(String s) 返回首次出现字符串 s 的索引，没有返回 -1, lastindexOf(String s) 返回最后出现字符串 s 的索引。indexOf(String s, int startpoint)
7. public String substring(int startpoint[, int end]) 返回 [start, end) 的子串。
8. public String trim() 返回去掉前后空格的字符串

字符串与基本数据的转化。使用: Double.parseDouble(String s);
public static byte parseByte(String s) throws NumberFormatException
              int
              short 
              long 
              float
              double
由基本数据转化为字符串
public static String valueOf(byte, int, long, float, double n)

注意 main() 的参数 args[0] 不是程序文件名。java mainClass args[0] args[1]...

对象的字符串表示 System.out.println(object x), x.toString() -> String

String(char a[]), String(char a[], int offset, length)
void getChars(int start, int end, char c[], int offset)
char[] toCharArray()

byte[] getBytes([String charsetName]) throws UnsupportedEncodingException


		String s = "我能吞下玻璃而不伤身体";
		char a[] = s.toCharArray();
		String pass = "pass";
		char b[] = pass.toCharArray();
		int al = a.length;
		int bl = b.length;

		System.out.println(new String(a)+"\nencrypt...");

		for(int i=0; i<al; i++){
			a[i] ^= b[i%bl];
		}
		System.out.println(new String(a)+"\nencrypt...");

		
		for(int i=0; i<al; i++){
			a[i] ^= b[i%bl];
		}
		System.out.println(a);


我能吞下玻璃而不伤身体
encrypt...
扡肜呭乸珋瓢聿乾佔車传
encrypt...
我能吞下玻璃而不伤身体

正则表达式
字符串对象有方法 public boolean matches(String regex)
元字符：
. 任何一个字符
\\d 0-9
\\D 不是 0-9
\\s 空格类, \t \n \x0B \f \r
\\S 非空格类
\\w 用于标识符的字符（不包括美元字符）
\\W 非上
\\p{Lower}, Upper, ASCII, Alpha, Digit, Alnum, Punct, Graph, Print, Blank, Cntrl

Graph = Alnum + Punct, Blank 空格或制表符
[abc] 代表其中一个， [a-z] a-z, [^abc] 不是 abc 任何一个， [a-z[1-9]] 并， [a-z&&[c-d]] 交 c-d， [a-f&&[^bc]] adef

普通 . 字符， [.]

限定修饰符：
? 0, 1
* 0, 多次
+ 1, 多次
X{n} n 次
X{n,} 至少 n 次
X{n,m} n-m 次
XY X 的后缀是 Y 
X|Y X 或者 Y 

字符串替换
public String replaceAll(String regex, String replacement), 返回字符串，不改变当前字符串。 "123abc".replaceAll("[a-z]+", "456")
字符串分解 public String[] split(String regex)

java.util.StringTokenizer
StringTokenizer 类
构造方法 StringTokenizer(String s) 默认 delim 是空格，换行...
StringTokenizer(String s, String delim)
该实例有 boolean hasMoreTokens(), String nextToken(), countTokens() 方法。

Scanner 类
1. 使用默认分割标记（空格）解析字符串
Scanner sc = new Scanner(String s)
方法： hasNext(), nextInt(), next(), 异常： InputMismatchException
2. 使用正则表达式作为分割标记解析字符串
sc.useDelimiter(regex)

java.util 包的 Date 类与 Canlendar 类
Date nowTime = new Date([long timeInMillis]); // 本机日期与时间
Canlendar can = new Canlendar;
can.getInstance;
can.set(int year, int month, int date);
can.get(Canlendar.MONTH); 参数为类的静态变量

日期的格式化：
String.format(格式化模式，日期列表)
String.format("%tY-%<tm-%<td", new Date()); // 使用同一个日期对象
%tH:%tM:%tS 
星期的全称不同， 设置 Locale 格式化模式
import java.util.Locale
String.format(Locale.JAPAN, "%tA", new Date());

Math, BigInteger, Random 类
Math 类方法 public static 
long abs(double a)
double max(double), min, random (0, 1), pow, sqrt, log, sin, asin

BigInteger 构造方法： BigInteger(String s)
实例方法：
add(BigInteger var), subtract, multiply, divide, remainder, compareTo, abs, pow, toString, toString(p 进制)

java.util.Random
构造方法：
public java.util.Random();
public java.util.Random(long seed);

public int nextInt();
public int nextInt(int);
public long nextLong();
public boolean nextBoolean();
public float nextFloat();
public double nextDouble();

### 数字格式化
1.5 之前使用 java.text.DecimalFormatter 类。之后使用了 Formatter 类。现在 String 类的静态方法 format 即支持类似 C 的 printf 函数类似的 fromat 方法。 
格式化顺序： 默认从左到右。可以在格式符前添加 index$ 改变顺序， %2$.2f
%% 转义 %

格式化整数
%d %o %x %X
%+ 正整数强制加上 + 号
%, 格式化千位加 , 号
数据宽度 %md %-md 右对齐，左对齐。如果数据实际的宽度大于格式的宽度，按照实际数据的宽度格式化。

%f %e E %g G %a A 浮点保留6位
%+， %， 正数格式化加 + 号，整数部分按千位分组
%m.nf 总计 m 位， 小数 n 位。如果数据实际的宽度大于格式的宽度，按照实际数据的宽度格式化。

StringBuffer 可变的类字符串对象
append(object o), insert(int index, String s), reverse(), delete(int startIndex, int endIndex), replace(int startIndex, int endIndex, String s)

Pattern 和 Matcher 类， java.util.regex
String reg = "good", input = "good morning.";
Pattern pa = Pattern.compile(reg);
Matcher ma = pa.matcher(input);

ma.find([int start]) -> boolean 可以多次调用， ma.start(), ma.end(), ma.group() 返回模式字符串的开始、结束位置，和 匹配的子串。

## 组件及事件处理
### java swing 概述
Component 的子类或者间接子类创建的对象称为 组件。
Container 的子类或间接子类创建的对象称为 容器。
可以向容器添加组件 add() 方法。
可以移除组件 removeall(), remove(Component c)
容器本身也是一个组件，可以把一个容器添加到另一个容器中。
每当有新的组件添加或移除时，当让容器调用 validate() 方法。


### 窗口
JFrame 底层容器，窗口
JDialog 也是底层容器，对话框。其他组件必须添加到底层容器中。不允许再将窗口添加到另一个容器中。
JFrame 常用方法：
JFrame(), JFrame(String s) 创建带标题的窗口
void setBounds(int a, int b, int width, int height)
void setSize(int width, int height)
void setLocation(int x, int y)
setVisible(boolean b = false)
setResizable(boolean b=true)
void dispose() 撤销当前窗口，并释放当前窗口所使用的资源
void setDefaultCloseOperation(int operation)
JFrame.DO_NOTHING_ON_CLOSE
HIDE_ON_CLOSE
DISPOSE_ON_CLOSE
EXIT_ON_CLOSE

菜单条，菜单项，菜单
菜单条： JMenuBar
JFrame 对象调用 setJMenuBar(JMenuBar bar)
举个例子：

import javax.swing.*;
import java.awt.*;



class myfile{
    public static void main(String args[]){
        WinMenu win1 = new WinMenu("test", 0, 0, 200, 300);

    } 
}
class WinMenu extends JFrame{
    JMenuBar jmb;
    JMenu jm1, jm2;
    JMenuItem jmi1, jmi2, jmi3;

    WinMenu(String s, int x, int y, int w, int h){
        init(s);
        setBounds(x, y, w, h);
        setVisible(true);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

    }
    void init(String s){
        setTitle(s);
        jmb = new JMenuBar();
        jm1 = new JMenu("File"); 
        jm2 = new JMenu("Save as");
        jmi1 = new JMenuItem("PDF");
        jmi2 = new JMenuItem("TXT");
        jmi3 = new JMenuItem("Quit");

        jm1.add(jm2); //
        jm2.add(jmi1);
        jm2.add(jmi2);
        jm1.add(jmi3); //

        jmb.add(jm1); //
        setJMenuBar(jmb); //

    }

}

常用组件与布局
组件：
JTextField, JTextArea, JButton, JLable, JCheckBox, JRadioBox, JComboBox, JPasswordField, 

    add(new JLabel("text area"));
    txtfield = new JTextField(10);
    add(txtfield);

    add(new JLabel("button"));
    button_ok = new JButton("OK");
    add(button_ok);

    add(new JLabel("checkbox"));
    cb1 = new JCheckBox("cb1");
    cb2 = new JCheckBox("cb2");
    add(cb1);
    add(cb2);


    add(new JLabel("radio"));
    rb1 = new JRadioButton("rb1");
    rb2 = new JRadioButton("rb2");
    bg = new ButtonGroup(); //
    bg.add(rb1);
    bg.add(rb2);
    add(rb1); //
    add(rb2); //

    add(new JLabel("Combo box"));
    Cb1 = new JComboBox();
    Cb1.addItem("Item 1"); //
    Cb1.addItem("Item 2"); //
    add(Cb1);

    add(new JLabel("text area"));
    txtarea = new JTextArea(6, 12);
    add(new JScrollPane(txtarea)); //

常用容器
相比于 JFrame 这种底层容器，本节中间容器经常要添加到 JFrame 中
1. JPanel 默认布局 FlowLayout
2. JScrollPane 滚动窗格只添加一个组件
JScrollPane scrollpane = new JScrollPane(new JTextArea());
3. 拆分窗格 JSplitPane
构造方法 JSplitPane(int a, Component a, Component b) a, 水平拆分，垂直拆分
4. JLayeredPane
方法 add(JComponent com, int layer)

常用布局 
java.awt 包中  FlowLayout BorderLayout CardLayout GridLayout BoxLayout null 布局
容器使用 setLayout(布局对象) 设置布局

处理事件
1. 事件源

2. 监视器。事件源将某个对象注册为自己的监视器。这个对象实现了 ActionListener 接口。 

3. 处理事件的接口，监视器必须实现 ActionPerformed(ActionEvent e) 方法。 

4. ActionEvent 类中的方法
public Object getSource()
public String getActionCommand() 事件源可以调用 public setActionCommand(String s) 设置


例子： 在文本框中输入字符串，按下回车，在另一个文本框输出输入的字符串
分析：
ActionPerformed 方法要对另一个文本框操作，需要得到该文本框的引用。可以在该类中组合该文本框，然后实现窗口的时候直接添加这个文本框

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

class ComponentDemo{
    public static void main(final String args[]) {
        final WinMenu win1 = new WinMenu("My Desktop Application", 0, 0, 200, 300);

    }
}

class WinMenu extends JFrame {

    MyListener al;
    WinMenu(final String s, final int x, final int y, final int w, final int h) {
        setLayout(new FlowLayout());
        setTitle(s);
        
        al = new MyListener();

        add(al.jtf);
        add(al.jb);
        add(new JScrollPane(al.jta));

        setBounds(x, y, w, h);
        setVisible(true);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
    }

}

class MyListener implements ActionListener
{
    public JTextArea jta;
    public JTextField jtf;
    public JButton jb;
    public MyListener()
    {
        jta = new JTextArea(6, 12);
        jtf = new JTextField(10);
        jb = new JButton("OK");
        jtf.addActionListener(this);
        jb.addActionListener(this);
    }
    public void actionPerformed(ActionEvent e)
    {
        String str = jtf.getText();
        jta.append(str+" "+str.length()+"\n");
        //System.out.println(str);
    }
}


MVC 结构
模型，存放数据的对象
视图，为模型提供数据显示的对象
控制器，处理用户的交互操作，对于用户的操作做出响应，让模型和视图进行必要的交互


对话框 JDialog ，和 Jframe 一样都是底层容器。对话框分为有模式和无模式
有模式的对话框处于激活状态时，将阻塞其他线程的执行。无模式不会。



## 输入输出流
File 类
构造方法： 
File(String filename)
File(String path, String filename)
File(File dir, String filename)
文件的属性：
String getName(), boolean canRead(), boolean canWrite(), boolean exists(), long length(), String getAbsolutePath()
String getParent(), boolean isFile(), boolean isDirectory(), boolean isHidden(), long lastModified()

目录：
创建目录 boolean mkdir()
列出目录中的文件：
String[] list()
File[] listFiles()
文件的创建与删除：
boolean createNewFile()
boolean delete()

运行可执行文件
1. 创建 Runtime 对象, java.lang.Runtime
Runtime ec = Runtime.getRuntime();
2. 调用 exec(String com) 方法


文件字节输入流 FileInputStream(String name) (File file)
public class java.io.FileInputStream extends java.io.InputStream {
  public java.io.FileInputStream(java.lang.String) throws java.io.FileNotFoundException;
  public java.io.FileInputStream(java.io.File) throws java.io.FileNotFoundException;
  public java.io.FileInputStream(java.io.FileDescriptor);
  public int read() throws java.io.IOException;
  public int read(byte[]) throws java.io.IOException;
  public int read(byte[], int, int) throws java.io.IOException;
  public void close() throws java.io.IOException;
  trim...
}
int read() 返回 0-255, 失败返回 -1
int read(byte[]) 读出 byte[] 长度字节，失败返回 -1
int read(byte[], int offset, int len)
String s = new String(s, 0, n) n 实际长度

文件字节输出流
FileOutputStream(String name[, boolean append])
public void write(int) throws java.io.IOException;
public void write(byte[]) throws java.io.IOException;
public void write(byte[], int, int) throws java.io.IOException;


文件字符输入输出流 FileReader, FileWriter 类


## java 多线程机制
线程的状态与生命周期
1. 新建。
2. 运行。start() 方法。 调用 run() 指定线程的具体使命。没有结束 run() 方法之前不能调用 start() 方法。
3. 中断。原因：
JVM 将 CPU 资源切换给其他线程。
调用了 sleep(int millsec) 立即让出 CPU 资源，sleep 执行完成后，该线程重新进入线程队列中排队等待 CPU 资源。 
wait() 方法调用 
执行某个操作进入阻塞状态
4. 死亡, 不可以继续运行
1. 线程完成了它的全部工作。run() 方法执行完成
2. 线程被提前强制终止。

线程调度与优先级1-10

Thread 类与线程的创建
1. 用户类继承 Thread 类，重写 run() 方法。
2. 使用 Thread 类
用户类 实现 Runnable 接口
class CutomizedClass implements Runnable; // run() method here
Thread thread = new Thread(new CutomizedClass());
thread.start();

目标对象与线程的关系
1. 完全解耦
2. 目标对象组合线程（弱耦合）

目标对象组合线程和使用 interrupt() 方法的例子
// interrupt() 吵醒休眠的线程 ，即执行了 sleep() 方法。被 InterruptedException 捕捉到
class ClassRoom implements Runnable
{
    Thread student = new Thread(this);
    Thread teacher = new Thread(this);

    public void run()
    {
        if (Thread.currentThread()== student){
            System.out.println("student now starts sleeping");
            try{
                Thread.sleep(1000*60*60);
            }
            catch(InterruptedException e)
            {
                System.out.println("student was interrupted.");

            }
            System.out.println("student starts listenning");
        }
        else if (Thread.currentThread() == teacher)
        {
            System.out.println("start class");
            if (student.isAlive())
            {
                student.interrupt();
                System.out.println("interrupt student");
            }
        }
    }
}

线程同步
银行类。两个线程，一个收入，一个支出。
public synchronized void saveortake(double amount);

协调线程的同步
wait(), notifyAll()

线程联合
线程 A 执行过程中，调用 B.join() 会执行完 B 线程的任务，之后转回 A 的任务。

线程默认不是守护线程，称为用户线程。一个线程可以在运行之前设置自己是否是守护线程 setDaemon(boolean on) 所有用户线程结束之后，即使守护线程中还有要执行的语句，守护线程也将立即结束执行。

### java 泛型
class Cone<E>
{
	E bottom;
	double height;
	
	public Cone(E obj)
	{
		bottom = obj;
	}
	
	public void setHeight(double h_)
	{
		height = h_;
	}
	
	public double area()
	{
		return Double.parseDouble(bottom.toString()) * height / 3;
	}
}

class Circle
{
	double r;
	public Circle(double r_)
	{
		r = r_;
	}
	public String toString()
	{
		return "" + Math.PI * r * r;
	}
}

public class ConeTest
{
	public static void main(String[] args)
	{
		Cone<Circle> MyCone = new Cone<Circle>(new Circle(10))
		MyCone.setHeight(100);
		System.out.println(MyCone.area());
	}
}

链表：
LinkedList<String> MyStrList = new LinkedList<String>(); // 空链表
ArrayList

引用类型转换：
上转型方法的调用：
实例方法，调用实际指向对象的方法
类方法，调用上转型对象本身的类方法
class Foo
{
    public void m1()
    {
        //
    }

    public static void m2
    {
        //
    }
}
class Bar extends Foo
{
    public void m1()
    {
        //
    }

    public static void m2
    {
        //
    }
}

Foo foo = new Bar();
foo.m1(); // Bar
foo.m2(); // Foo
