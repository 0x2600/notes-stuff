php 运算符：
+, -, *, /(实数除法), %, -x(取反), intdiv(x, y)
++x, --x, x++, x--;
==, ===, !=, !===, >, <, >=, <=, <=>
and, or, &&, ||, !, xor
(expr1)?(expr2):(expr3)
. 字符串连接
=， +=， -=， ×=， /=, .=, %=
&, |, ^, ~, <<, >>


变量：
声明 $ 后跟变量名，接赋值。无须声明类型。
命名规则同 C 语言。


常量：只能是整型，浮点型，字符串，布尔型，数组
1. 常量没有 $
2. define(), const 定义
3. 全局作用域
4. 定义之后不可修改或者取消定义
define("name", "php", false);
const name = "php";

if...else, elseif
switch case break default 整型或者字符串

while()
{}

do
{}while();

foreach 遍历数组或者对象
$arrayz = [1, 2, 3];
foreach($arrayz as $key => $value)
{
	echo $key.' '.$value;
	echo "\n";
}


函数传参：按值，按引用

有类型声明的形参：
传递给函数的参数若不是期望的类型，默认会尝试转换。
可以使用 declare(strict_types=1) 设置严格模式，不会进行转换。除了一种情况：期望浮点型，传入整型。

可变参数，可变参数当作数组传递给函数。
function foo(...$num)
{
	$sum = 0;
	foreach($num as $i)
	{
		$sum += $i;
	}
	return $sum;
}

函数返回值，可以返回数组
返回值类型声明：
function sum($a, $b):float
{
	return $a + $b
}
返回值类型声明的严格模式，同形参类型声明

可变函数示例：
function test1()
{
	echo 1;
}
function test2()
{
	echo 2;
}
$funcname = "test1";
$funcname(); // 1
$funcname = "test2";
$funcname(); // 2


匿名函数，闭包函数
1.
$foo = function ($x)
{
	return $x;
};
echo $foo(2);

2. 
$arr = [1, 2, 3];
$res = array_map(function ($a){return $a * $a;}, $arr);
print_r($res);

use 关键字：
function demo()
{
	$a = 1;
	$b = 2;
	$foo = function () use ($a){
		echo $a;
	}
	foo();
}
demo();
匿名函数可以使用父级作用域的变量，但是不可以修改
如果想要修改，需要使用 &，类似于按引用传参


双引号会解析其中的变量，而单引号不会。双引号中的变量注意边界。空格或 {}
$a=test;
echo "{$a}a"; // testa

bash:
a=test
echo "${a}a" // testa
转义字符：
单引号中定义的字符串只能转义单引号和转义符本身。而在双引号中的字符串中，可以转义更多的特殊字符。
\n, \$, \r, \\, \v, \"

单引号的解析速度要比双引号快。

strtolower,
strtoupper,
mb_strtolower, mb_strtolower($str, 'UTF-8')
mb_strtoupper,
ucfirst,
lcfirst,
ucwords, 
lcwords,
mb_convert_case($str, $mode), mode MB_CASE_LOWER, MB_CASE_UPPER, MB_CASE_TITLE 需要 php7-mbstring 软件包支持

查找字符串：
stripos, strpos, strripos, strrpos 

str_ireplace, str_replace 
substr_replace
substr 

trim, ltrim, rtrim
strlen

addslashes, stripslashes
addslashes("I'm"); // "I\'m" 
str_repeat
str_shuffle
explode 字符串转数组， 类似于 python 的 split
implode 数组转字符串，类似于 python 的 join

数组无需指明大小， 可以存储任何类型数据
1. 直接赋值数组元素声明数组
$arr[0] = 'a';
var_dump, print_r 打印数组
声明一个数组时，如果索引值是递增的，可以省略索引值，默认从 0 开始
2. 使用 array() 函数声明数组
$arr = array(0=>'a', 1=>'b');
可以不指明下标，默认从 0 开始的索引数组
$arr = array('a', 'b');


二维数组：将数组中的一个或多个元素声明为一个数组。
$arr[0]["name"] = "test1";
$arr[1]["name"] = "test2";

$arr = array(
	array('a'),
	array('b')
);

in_array 查找值，只会查找第一维。可以查找一个数组中是否包含另一个数组

count 计算数组包含元素，mode 如果设置为1，或者为 COUNT_RECURSIVE 则递归统计数目。也可以统计对象的属性个数。
current 返回数组内部指针指向的元素，该功能类似于 pos 函数
next($arr);
current($arr)
还有 end, prev, reset, each 这些函数也可以操作数组内部指针
key 返回当前元素的键
array_key_exists 检查键是否存在
array_keys 获取键，或者值对应的键
array_values 获取值 
array_search 搜索给定的值返回键
array_pad 将某个值填充进数组，使得数组的长度为参数指定的长度
array_fill 同上，有索引指定从哪里开始
array_fill_keys(array $keys, mixed $value)
array_rand 随机获取数组的键

bool sort(array $arr [, int $sort_mode])
mode:
SORT_REGULAR, SORT_NUMERIC, SORT_STRING...
asort 升序排序，并保持索引关系
rsort 降序排序
arsort 保持索引关系，降序排序
shuffle 

数组遍历：
for
foreach: foreach($array as $key=>value),不会改变数组元素的值，除非使用引用 foreach($arr as &$val)
以上两个函数都不会改变数组内部的指针 php7 
each 返回当前的键值并将数组内部数组指针移向下一位。必要时使用 reset 恢复数组指针
$arr = array("1, ", "2, ");
while(list($key, $val)=each($arr))
{
	echo $key."=>".$val."\n";
}

解压:
list($var1, $var2) = $arr;
array_chunk 分割数组，多维
array_merge 合并数组
array_unshift 数组开头插入元素
array_shift 删除数组开头的元素
array_push 在数组尾部插入一个或多个元素
array_pop 删除数组末尾的元素
array_slice 截取数组的一部分
array_splice 删除数组的一部分元素
array_splice($arr, int $start, int $len, mixed $replacement)
is_array 
array_sum
array_product 计算数组元素累积
array_flip 交换数组的键和值

