求值顺序问题
1. 函数参数求值顺序不定
int f(int, int);
int a = 0;
int& ra = a;
f(a, ra *= 2);

2. 操作数评估求值顺序
int ret = f1() + f2();// 不确定先调用哪个函数
可以确定的求值顺序:
&&, ||, ?:（短路）
逗号表达式中每个表达式都会被执行，整个表达式的值是最后一个表达式的值。

宏函数定义
1. 使用括号
#define ADD(a, b) ((a) + (b))
2. “调用时”不允许参数修改
3. 多条表达式使用大括号
for(...)
	MULTI_LINE_MACRO(); // fails

重复包含解决
1.
#ifndef _INCLUDE_H
#define _INCLUDE_H

#endif
2. 非标准，速度快
#pragma once


结构体保留字节是为了显式进行字节对齐。
struct A
{
	char a;
	char reserve;
	short c;
}

#pragma pack(n) // 1, 2, 4, 8, 16


typedef 也是存储类的关键字，不可与 extern, static 等同时使用

不要对void*指针使用算数运算

引用与地址没有关联，不占用任何存储空间
引用没有地址，所有没有引用的引用，指向引用的指针或者引用的数组

智能指针：
可能的资源泄露
class A;
int f();
void do(shared_ptr<A>, int);

do(shared_ptr<A> ptr(new A), f());

函数执行顺序不确定，可能出现
1. new A;
2. f(); //假如这里抛出异常，那么A将不会被智能指针管理
3. shared_ptr<A>ptr(new A);

虚析构函数只有在类想要被继承，有另外一个虚函数时才有定义的意义。
类不想被继承，或者没有别的虚函数，最好不要定义虚析构函数。
构造函数不能为虚函数。因为对象还没有被构造，虚函数表还没有被初始化。

避免在构造，析构时调用虚函数。
构造，先构造基类，此时派生类还没有完全构造，因此不会调用派生类的虚函数。
析构时，先析构派生类，再析构基类。析构基类，派生类部分已经析构，所有也只会调用基类的虚函数。

派生类的赋值运算符不要忘记调用基类的赋值运算符。

operator== 三步
1. 自赋值检查
2. 释放原来空间，申请新空间，拷贝
3. return *this


重载 << 操作符，第一个参数必须是 ostream，所以必须是友元函数。
ostream& operator<<(ostream&os, const MyType& type)
{
	os << ...
	return os;
}

==, !=, <, >, <=, >= 建议成对实现。还有+, +=等

T&operator++() 前缀
const T operator++(int) 后缀
不要重载 &&, ||， ，逗号运算符

内联函数，1-5行小函数，不要对构造，析构函数使用

容器内元素的删除。
删除后，迭代器失效
可以先 remove(返回迭代器)后erase
list 应该调用成员函数。list.remove

vector 移除示例
auto i = std::begin(inv);

while (i != std::end(inv)) {
    // Do some stuff
    if (blah)
        i = inv.erase(i); // 返回下一个有效迭代器
    else
        ++i;
}

不要使用 void func(const int& i)
void func(const int i) 可以使用

使用移位操作代替乘除法.操作数必须是无符号整数
a = a * 7;// a = a * (8 - 1); // a = (a << 3) - a;

多层循环，最少次数的循环放外层，最多次数的循环放内层。

switch 语句，最可能的分支放在前面。

精简函数形参，可以封装成一个类，传引用。

减少堆内存碎片，少使用动态内存。多使用静态，或者自动存储。一次分配大块内存。内存池技术。

编译器决定函数是否内联。
函数大小，局部对象声明，是否存在函数调用，递归。

不要在头文件中引入命名空间。

控制不能在栈上创建对象 private 析构函数
控制不能在堆上创建对象 operator new, new[], delete, delete[] 声明为private

单例的另一种思路
友元创建对象函数中声明静态变量

冗长的 if else, switch case 改为表驱动。MFC 消息映射












