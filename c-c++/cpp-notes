1.11 内联函数
定义时声明 inline

1.14 函数的默认参数
默认参数放在形参列表的最后面，值可以指定字面常量或者使用变量表达式
float d = 1.0
void foo(float a=d+1.0){
    // function body here.
}
简单点，函数定义时指定默认参数

1.16 函数重载 function overloading
函数名字相同，参数列表不同(参数个数，类型，顺序不同)。返回值不能作为重载的依据。
#include <iostream>
using namespace std;

void Swap(int a, int b){
	cout << b << " " << a << endl;
}

void Swap(float a, float b){
	cout << b << " " << a << endl;
}

int main(){
	int x, y;
	cin >> x >> y;
	Swap(x, y);
	
	float x1, y1;
	cin >> x1 >> y1;
	Swap(x1, y1);

}

2.1 类的定义和对象的创建
类是一种数据结构，不占用内存空间，所以类体中的成员变量在定义类的时候不可以初始化。
类通常定义在函数外面
class Stu{
public:    
    int x;
    void foo(){
        cout << x;
    }
};
int main(){
    // 在栈上创建对象
    Stu ming;
    ming.x = 20;
    ming.foo();

    // 使用对象指针
    Stu *pming = &ming;
    pming->foo(); 

    // 堆上创建对象. new 在堆上创建出来的对象是匿名的，需要指针指向它。
    // 栈内存是程序自动管理的，不能使用 delete 删除。堆内存有程序员管理， new 和 delete
    // 成对出现。
    Stu *phan = new Stu;
    phan->x = 30;
    phan->foo();
}

2.2 类的成员变量和成员函数
在类体中定义的成员函数会自动成为内联函数。内联函数一般不是我们期望的(除非成员函数比较
短小)。所以建议在类体内部对成员函数作声明，在外部定义。
如果希望函数定义在类外部，又希望是内联函数。定义时加 inline 关键字。

// 外部，内联方式
inline void Stu::foo(){
    cout << x << endl;
}

2.3 类成员的访问权限和封装
类内部。无访问权限的限制
类外部。通过对象访问成员，可以访问 public 属性成员。
类的声明和成员函数的定义都是类定义的一部分。通常将类声明放在头文件中，将成员函数
的定义放在源文件中。

2.6 构造函数
名字和类名相同，没有返回值，因此返回值类型是 void 也不行，函数体中不可以有 return 语句，没有变量来接收返回值。一般是 public 属性。
class Stu{
private:
    char *mname;
    int mage;
public:
    Stu(char *, int);
    void greet(){
        cout << mname << endl;
    }
};

Stu::Stu(char *name, int age){
    mname = name;
    mage = age;
}

int main(){
    Stu han("Han", 20);
    han.greet();

    Stu *pStu = new Stu("test", 21);
    pStu->greet();
    return 0;
}

构造函数重载
如果定义了构造函数，那么编译器就不会自动生成空白的构造函数。
调用没有参数的构造函数，可以省略括号。 Stu han(); Stu han; Stu *phan = new Stu(); Stu *phan = new Stu;

2.7 构造函数初始化列表
class Stu{
public:
    Stu(char *name, int age);
};

Stu::Stu(char *name, int age):m_name(name), m_age(age){
    // TODO;
}

成员变量的初始化顺序与初始化列表无关，只与成员变量在类中声明的顺序有关
class Demo{
private:
    m_a;
    m_b;
public:
    Demo(int b);
}

Demo::Demo(int b):m_b(b), m_a(m_b){}
等价于
Demo::Demo(int b){
    m_a = m_b;
    m_b = b;
}
在栈上创建对象时，m_a 初始化的值不确定。

初始化 const 成员变量，唯一方法。

2.8 析构函数
名字，类名前加 ~,没有参数，不能被重载(只有一个析构函数)。用户没有定义，编译器自动生成。

内存分区: 所有函数之外创建的对象是全局对象，位于全局数据区，程序结束执行时调用这些
对象的析构函数。
函数内部创建的对象是局部对象，栈区，函数执行结束调用这些对象的析构函数。
new 创建的对象位于堆区，delete 删除时调用析构函数。

析构函数，复制构造函数

#include <iostream>
#include <cstring>

class MyString{
    char *Buf;
public:
    MyString(const char *InitInput)
    {
        if (InitInput)
        {
            Buf = new char[strlen(InitInput) + 1];
            strcpy(Buf, InitInput);
        }
        else
        {
            Buf = NULL;
        }
        
    }
    ~MyString()
    {
        if (Buf)
        {
            delete[] Buf;
            Buf = NULL;
        }
    }

    const char *getBuf()
    {
        return Buf;
    }

};

// 浅复制：
// str.Buf_2, str1.Buf_2 指针两份，指向的缓冲区一份， main 中的 str1 析构函数调用 str1.Buf_2 非空 
void UseMyString(MyString str){ }

int main()
{
    MyString str1("hello");
    UseMyString(str1);
}

2.11 this 指针
const 指针(不可修改指针的指向，修饰指针)，指向当前对象，只能在类的内部使用。可以访问 private, protected, public 成员。只有当对象被创建后 this 才有意义，因此不能在 static 函数中使用。(此时可能没有对象被创建)
this 本质上可以当做是成员函数的隐式形参，属于函数的局部变量。

2.12 static 静态成员变量
public:
    static int m_total;
static 成员变量属于类，在类声明的外部进行初始化，初始化时不能加 static。在内存分区的全局数据区分配内存，程序结束释放，即不随对象的创建而分配内存，也不随对象的销毁而释放内存。必须初始化，在类体外进行，不赋值默认初始化为0。可以通过对象名访问，也可以通过类名访问，遵循权限限制。

2.13 static 静态成员函数
静态成员函数与普通成员函数，普通成员函数有 this 指针，可以访问类中的任意成员;静态成员函数只能访问静态成员。
声明时加 static, 定义时不能加 static。可以通过类调用，也可以通过对象调用。
public:
    static int getTotal();

2.14 const 成员变量和成员函数
const 成员变量声明时加 const，只能通过构造函数的初始化列表初始化。
const 成员函数，可以使用类中的所有成员变量，但是不能修改他们的值。声明和定义时在函数头部的结尾加 const
char *getname() const;
char *Stu::getname() const{
    ;
}
函数开头的 const 修饰函数的返回值。函数头结尾的 const 表示 const 常成员函数，不会修改成员变量的值，可用于 get 函数。 

2.15 const 对象
const 对象只能调用类的 const 成员(变量和函数)。
定义对象时：
const Stu stu();
Stu const stu()

const Stu *pstu = new Stu()
Stu const *pstu = new Stu()

2.16 友元函数和友元类 friend 关键字
友元函数 在当前类以外定义的、不属于当前类的函数也可以在类中声明，但要在前面加 friend 关键字，这样就构成了友元函数。
1) 非成员函数声明为友元函数

class Stu{
pulic:
    firend void show(Stu *pstu);
};

void show(Stu *pstu){
    cout << pstu->some_private_var;
}
int main(){
    ;
}

2) 其他类的成员函数声明为友元函数
class Addr;
class Stu{
public:
    char *getCity(Addr *paddr);

};
class Addr{
    friend char *Stu::getCity(Addr *paddr);
};
友元类 略
2.18 class 和 struct 区别
C++ 中 struct 可以包涵成员函数。

2.19 string
#include <string>
string 类的转换函数 c_str() 将 string 转换为 C 风格的字符串，返回指针。
+， += 字符串拼接。操作数可以是string, string; string, c_str; string, 字符数组; string, 字符
string 增删改查:
insert(pos, str)
erase(pos, len=npos)
substr(pos=0,len=npos)
size_t find(string &, pos=0)
size_t find(char *, pos=0)
rfind()
find_first_of() 查找共有的字符串出现的位置

3.1 引用
引用必须在定义的同时初始化，并且不能再引用其他数据。定义时 &, 使用时不要 &，& 取地址。
不希望通过引用来修改原始数据,常引用：
const int &r = a;
int const &r = a;

```
int main(){
    int a = 99;
    int &r = a;
    r = 90; // a = 90
}
```
void swap3(int &a, int &b){
    int tmp = a;
    a = b;
    b = tmp;
}
// call swap3
int num1, num2;
swap3(num1, num2);

4. 继承与派生
class Stu:public People;
public 继承方式，其他包括 protected, private(默认) 继承方式
friend 修饰的函数不是该类的函数，参数一般为该类。
protected 成员不能通过对象访问，当存在继承关系时，基类中的 protected 成员可以在派生类中使用

public, protected, private 指定继承方式
    public 成员 | protected 成员 | private 成员
public 继承 | public | protected | 不可见
protected 继承 | protected | protected | 不可见
private 继承 | private | private

改变访问权限
using 改变基类中 public, protected 成员的访问权限。不能改变 private 成员，因为该成员在基类中不可见。

子类中：
public:
    using Stu::m_name
private:
    using Stu::m_age

4.3 继承时的名字遮蔽问题
派生类的成员(成员变量或成员函数)和基类的重名，那么在派生类中使用该成员实际上使用的是派生类新增的成员。
```
#include <iostream>
#include <string>

using namespace std;

class people{
public:
    void show();
protected:
    string m_name;
    int m_age;
};

void people::show(){
    cout << m_name << " " << m_age << endl;
};

class stu: public people{
public:
    stu(string name, int age, float score);
    void show();
private:
    float m_score;
};
stu::stu(string name, int age, float score):m_score(score){
    m_name = name;
    m_age = age;
}
void stu::show(){
    cout << m_name << " " << m_age << " " << m_score << endl;
}

int main(){
    stu stu1("stu1", 20, 98.0);
    stu1.show();
    stu1.people::show(); // 基类的函数 
}
```
只要成员函数名字一样，就会遮蔽，而不是重载。
class class1{
public: 
    void func();
    void func(string)
};
class class2: public class1{
public:
    void func(int);
    void func(float)
};
int main(){
    class2 obj2();
    obj2.func(1);
    obj2.func(1.0);
    obj2.class1::func();
    obj2.class1::func("test")
    // 以上调用方法是正确的。class1 中的 func 构成重载， class2 中的 func 构成重载。
    // obj2();
    // obj2("test") 这两个调用是错误的。
    return 0;
}

4.6 基类和派生类的构造函数
基类构造函数不会被继承，因为构造函数的名字都不相同。
子类对父类继承过来的变量使用构造函数初始化，但是父类可能存在 private 属性的变量，这是就要借助父类的构造函数来初始化。即在子类的构造函数中调用父类的构造函数。
不能当作普通的成员函数来调用。因此放在派生类构造函数头部。不能放在子类构造函数体中。
派生类构造函数只能调用直接基类的构造函数，不能调用间接基类的。
#include <iostream>
#include <string>

using namespace std;

class class1{
public:
    class1();
    class1(string name, int age);
public:
    string m_name;
    int m_age;
};
class1::class1(){
    m_name = "x";
    m_age = 20;
}
class1::class1(string name, int age){
    m_name = name;
    m_age = age;
}
class class2: public class1{
public:
    class2();
    class2(string name, int age, float score);
public:
    float m_score;
};
// 调用基类的默认构造函数
class2::class2(){
    m_score = 0.0;
}
// 子类构造函数调用父类构造函数，函数调用，传入实参
class2::class2(string name, int age, float score):class1(name, age), m_score(score){}

int main(){
    class2 obj1; // 这里写 class2 obj1() 会报错。因为会把 obj1 当成函数。
    cout << obj1.m_name << obj1.m_age << obj1.m_score << endl;
    class2 obj3("test", 25, 2.0);
    cout << obj3.m_name << obj3.m_age << obj3.m_score << endl;
}

基类和派生类的析构函数
创建派生类对象时，先执行基类构造函数，再执行派生类构造函数
销毁派生类对象时，先执行派生类析构函数，后执行基类析构函数

## 多继承
class D: public A, private B, protected C{};

构造函数
D(): A(), B(), C(){
//
}
基类构造函数的调用顺序和声明派生类时基类出现的顺序相同， 与构造函数中出现的顺序无关

命名冲突
多个基类中出现同名的成员(变量或者函数)，如果在子类中使用，需要类名加域解析符以明确指定使用哪个基类的成员。
class A{
public:
    void show();
};

class B{
public:
    void show();
};

class C:public A, public B{
public:
    void display(){
        A::show();
        B::show()
        // other code define here
}
};
4.11 虚继承和虚基类
虚继承，使得在派生类中只保留一份间接基类的成员。
A, B, C, D
class B: virtual public A;
class C: virtual public A;
BC愿意共享其基类。
虚继承时的构造函数：
派生类首先调用虚基类的构造函数，虚基类的派生类对虚基类的构造函数的调用无效。
4.14 向上转型
派生类对象赋值给基类对象。
成员变量是派生类的，成员函数确实基类的。
与 java 相比，java 上转型对象的成员函数也是派生类的，除非 static 修饰的函数还是基类的。
而 C++ 上转型对象能够访问派生类的成员变量却不能访问派生类的成员函数。C++ 通过虚函数来增加此功能。

5.1 虚函数
函数声明前加 virtual 关键字。定义处可以加也可以不加。这样与 java 的默认上转型对象行为一致。
注意事项:
1) 只需要在虚函数的声明处加上 virtual 关键字，函数定义处可以加也可以不加。

2) 为了方便，你可以只将基类中的函数声明为虚函数，这样所有派生类中具有遮蔽关系的同名函数都将自动成为虚函数。

3) 当在基类中定义了虚函数时，如果派生类没有定义新的函数来遮蔽此函数，那么将使用基类的虚函数。

4) 只有派生类的虚函数覆盖基类的虚函数（函数原型相同）才能构成多态（通过基类指针访问派生类函数）。

5) 构造函数不能是虚函数。对于基类的构造函数，它仅仅是在派生类构造函数中被调用，这种机制不同于继承。也就是说，派生类不继承基类的构造函数，将构造函数声明为虚函数没有什么意义。

6) 析构函数可以声明为虚函数，而且有时候必须要声明为虚函数。 

5.4 纯虚函数
virtual int getage() = 0;
只要包含纯虚函数的类为抽象类，不能实例化，派生类必须实现纯虚函数才能被实例化。

// TODO 函数中返回对象是否是返回指针？
complex operator+(complex &n){
    complex B(0.0, 0.0);
    B.m_real = this->m_real + n.m_real;
    B.m_imag = this->m_imag + n.m_imag;
    return B;
}

函数模板
template<typename T> void Swap(T &a, T &b){
    T tmp = b;
    b = a;
    a = tmp;
}

类模板
template<typename T1, typename T2>
class class_name{};

声明需要带模板头，每个成员函数的定义也要带模板头

使用类模板创建对象：
Point<int, float> p(1, 2.1);
必须显式指明数据类型。
Point<int, float> *ppoint = new Point<int, float>(1, 2.1)

异常
try{
    //
}
catch(exceptiontype [e]){
    // 
}
e 变量可以省略

异常类型可以是 int、char、float、bool 等基本类型，也可以是指针、数组、字符串、结构体、类等聚合类型。C++ 语言本身以及标准库中的函数抛出的异常，都是 exception 类或其子类的异常。也就是说，抛出异常时，会创建一个 exception 类或其子类的对象。

多级 catch, 从上到下匹配，一个匹配，就会停止检索其他的异常。
catch 在匹配异常类型的过程中，会进行类型转换，仅能进行「向上转型」、「const 转换」和「数组或函数指针转换」。
throw exceptionData;

throw 用作异常规范，或者异常指示符，异常列表
double foo(char param) throw (int, char, exception);
double foo(char param) throw (); //不会抛出任何异常，即使抛出，try 也不会检测。

1. 虚函数中的异常规范
派生类虚函数的异常规范要比基类更严格，或一样严格

2. 函数声明和函数定义中的异常规范
严格保持一致

异常规范现已废弃，避免使用。

异常类：


面向对象进阶：
拷贝构造函数：
Student::Student(const Student &stu){
    this->m_member = stu.m_member;
}

const 修饰。 1. 不希望修改实参， 2. 实参可以是 const 对象，因为非 const 对象可以转换为 const 对象，而 const 对象不可以转换为非 const 对象。 
如无显式定义拷贝构造函数，那么编译器生成默认拷贝构造函数，当类持有其他资源，如动态分配的内存，打开的文件等，默认构造函数不能拷贝这些资源，需要显式定义拷贝构造函数。

深拷贝，浅拷贝
有指针时使用深拷贝，确保拷贝出的对象和原对象不会相互影响。
当浅拷贝不能满足需求时，如记录对象创建的时间，创建过的对象数目。

自定义类型转换规则（以类的成员函数形式出现）
1. 转换构造函数：(其他类型转换为当前类型) conversion constrcutor
Complex(double real):m_real(real), m_img(0.0){}
Complex a = (Complex)2.1;
Complex b = Complex(2.2);

构造函数：
默认生成构造函数 Complex();
普通构造函数： Complex(double real, double img);
拷贝构造函数： Complex(const Complex &a);
转换构造函数： Comple(double real);
class Complex{
public:
    Complex(double x, double y): m_real(x), m_img(y){}
    Complex(double real):m_real(real), m_img(0.0){}
    Complex(const Complex &a){
        this->m_real = a.m_real;
        this->m_img = a.m_img;
    }
    void to_string(){
        cout << m_real << "+" << m_img << "j" << endl;
    }
    // 类型转换函数
    /* operator <type>(){
        // TODO
        return data;
    }
    */
    operator double() const { //2. 函数一般不会改变被转换的对象
        return m_real;
    }
public:
    double m_real;
    double m_img;
};

2. 类型转换函数：(当前类的类型转换为其他类型) type conversion function
1. type 可以是内置类型，类类型，typedef 定义的类型别名，任何可以被返回的类型(除 void) 一般不允许转换为数组和函数类型。转换为指针类型和引用类型是可以的。
2. 函数一般不会改变被转换的对象
3. 类型转换函数可以被继承，可以是虚函数
4. 多个类型转换函数注意二义性。

四种类型转换运算符
static_cast
const_cast 
reinterpret_cast
dynamic_cast
xxx_cast<newType>(data)
如：
double score = 2.1;
int n = static_cast<int>(score);

static_cast 良性转换，风险较低。适用于：
自动类型转换。void 指针和具体类型指针的转换。有转换构造函数或者类型转换函数的类与其他类型的转换。
不可以：
两个具体类型指针之间的转换。
int 和指针之间的转换。
不可以将 const, volatile 修饰符去掉

const_cast 去掉 const volatile 修饰符。
例子：
int main{
    const int n = 100;
    int *p = static_cast<int*>(&n);
    *p = 200;
    // n 的值是 100, *p 的值是 200
    // C++ 对待 const 变量类似 #define 宏。
}

reinterpret_cast 适用于不能用 static_cast 转换的情况。例如两个具体类型指针之间的转换，int 和指针之间的转换。
double *pm_real = reinterpret_cast<double *>(new Complex(1.1, 2.2));
刺穿类的封装性。

dynamic_cast <newType>(expression)
dynamic_cast 中 newType 和 expression 必须同时是指针类型或者引用类型。指针转换失败将返回 NULL, 引用转换失败将抛出 std::bad_cast 异常。 


## 输入输出流
标准流对象:
cin 从键盘读取，可以被重定向从文件读取
cout 向屏幕输出，可以被重定向文件输出
cerr 标准错误输出流，不可以重定向
clog 同 cerr, 除 cerr 不使用缓冲区， clog 使用缓冲区，缓冲区满或者刷新时才输出

ostream cout(&fout) // cout 是 ostream 对象，这是复制构造函数。

freopen("file", "w", stdout) // redirect cout to file.
freopen("file", "r", stdin) // redirect cin to file not from keyboard.

c++ cout 对象使用流操作算子进行输出格式控制
使用方法： cout << hex << 10;

输出单个字符
ostream &put(char)
putchar(char)

cin 正常读取返回 true ，遇到结束标志返回 false (ctrl + D)
cin 返回值是 istream & 类型，该对象有类型转换函数 operator bool(){}

读取一个字符
int get()

读取一行字符串
istream & getline(char *buf. int size)
istream & getline(char *buf, int size, char delimiter)
读取出错(比如读取超过 size 个字符)，记得清楚 cin 内部出错标记，使 cin 可以正常读取 cin.clear()

跳过指定字符
cin.ignore(int n=1, int delim=EOF) 跳过 n 个字符或者 delim 之前的字符
用法：
cin.ignore();
cin >> buf;

查看输入流中的下一个字符，不取走
int cin.peek()

处理输入输出错误
标志    检测函数
badbit  bad()
eofbit  eof()
failbit fail()
goodbit good()
输出错误一般较少
int i = 0;
cin >> i;
if (!cin) // 不是 good() 
{
    if (cin.bad())
    {
        return error_code;
    }
    if (cin.eof())
    {
        //TODO
    }
    if (cin.fail())
    {
        cin.clear(); // 清除标志，错误恢复， good 
        //TODO 
    }
}

管理输出缓冲区
* 缓冲区刷新原因：
* 程序结束
* 缓冲区满
* 操作符如 endl 显式刷新缓冲区。flush, ends // cout << "hi" << endl;//ends
* unitbuf 操作符
cout << unitbuf;
//out
cout << nounitbuf;
* 关联输入与输出
从输入读取数据的操作都会导致刷新关联的输出流。默认 cin 与 cout 关联。

文件操作 文件流类
ifstream, ofstream, fstream // #include <fstream>

1. 打开文件 文件与文件流对象关联。指明文件使用方式（读写，文本，二进制）
关闭文件： 文件流对象 close 函数
1. 流对象 open 成员函数
ifstream iFile;
iFile.open("file", ios::in);
2. 流类的构造函数 
ifstream iFile("file", ios::in);

文本文件的读取和写入，类似 cin, cout

二进制文件的读取和写入。ifstream, ofstream 对象的 read, write 成员函数

文件流类 get put 读写文件，一次读写一个字节，get(char &c)

移动和获取文件读写指针 
读： seekg(int offset, int mode), int tellg()
写: seekp(int offset, int mode), int tellp()
istream & seekg (int offset, int mode);
ostream & seekp (int offset, int mode);
mode 参数取 ios::beg, ios::cur, ios::end

文本模式和二进制模式打开文件的区别：
unix/linux 无区别
Windows 平台： 读取文本文件 \r\n 转换为 \n，写入时 \n 转换为 \r\n 写入


STL 标准模板库
容器 container 存放数据的模板。使用容器时，将容器类模板实例化为容器类，知名容器中存放的元素类型。STL 的算法(函数模板)对容器中的元素进行比较，因此被放入容器的对象所属类最好重载 ==, < 运算符。

* 顺序容器(非排序，指定位置)： 可变长动态数组 vector, 双端队列 deque， 双向链表 list
* 关联容器(排序，不能指定位置)： set, multiset, map, multimap
* 容器适配器： stack, queue, priority_queue // 没有迭代器


vector<int> 容器类名字， vector<int> a 容器对象
所有容器都有的成员函数：int size(); bool empty();
容器和关联容器还有的成员函数：
begin() 返回指向第一个元素的迭代器
end()
rbegin()
rend()
erase() // 参数复杂
clear() // 删除所有元素
顺序容器成员函数：
front()
back()
push_back()
pop_back()
insert()

迭代器 iterator 迭代器是一个变量，相当于容器和操纵容器的算法之间的中介。
按定义方式分类：
1. 正向迭代器
容器类名::iterator 迭代器名
2. 常量正向迭代器
容器类名::const_iterator 迭代器名
3. 反向迭代器
容器类名::reverse_iterator 迭代器名
4. 常量反向迭代器
容器类名::const_reverse_iterator 迭代器名

迭代器用法示例： *迭代器名 表示迭代器指向的元素，通过非常量迭代器还可以修改元素的值
迭代器可以进行 ++ 操作：
正向 指向后一个元素
反向 指向前一个元素

vector<int> a;
for (int i = 0;i < 5;i++)
{
    a.push_back(i);
}
vector<int>::iterator iter;
for (iter = a.begin();iter < a.end();++iter)
{	
    cout << *iter << endl;
    (*iter) += 1;
}

++iter 比 iter++ 速度要快
原因：
// 前置 ++
CDemo CDemo::operator++()
{
    ++n;
    return *this;
}
// 后置 ++
CDemo CDemo::operator ++(int k)
{
    CDemo tmp(*this);
    n++;
    return tmp;
}

迭代器的分类： 输入，输出，正向，双向，随机访问
1. 正向： ++p, p++, *p, 迭代器间赋值， == !=
2. 双向：具有正向的全部功能，另外 --p, p--
3. 随机访问迭代器：具有双向迭代器的全部功能。另外
p += i; p -= i; p + i; p - i; p[i]; // i 为整型或常量
不同容器的迭代器功能：
vector 随机访问
deque 随机访问
list 双向
set/multiset 双向
map/multimap 双向
stack 不支持迭代器
queue 不支持迭代器
priority_queue 不支持迭代器

迭代器的辅助函数
#include <algorithm>
advance(p, n)
distance(p, q)
iter_swap(p, q)

STL 算法
有的算法会改变作用的容器 copy, remove, random_shuffle, fill
有的不会改变： find, count_if
常用算法：
find:
template<class lnlt, class T>
lnlt find(lnlt first, lnlt last, const T& val); // 使用 == 运算符判读元素是否相等，如果容器存放对象，则应重载 == 运算符。找不到返回 T.end()

vector<int> v;
v.push_back(1);v.push_back(2);v.push_back(3);v.push_back(4);
vector<int> v_it = find(v.begin(), v.end(), 1);
if (v_it != v.end()) // found
vector<int> v_it = find(v.begin(), v.end(), 5);
if (v_it == v.end()) // not found

int b[] = {1, 2, 3};
int *p = find(b, b+4, 1);
if (p != b+4) // found

排序:
template<class _Randlt>
void sort(_Randlt first, _Randlt last);
int a[] = {2, 1}
sort(a, a+2);

比较大小通过 < 
以下三个说法等价：
x 比 y 小。x<y 为真。y 比 x 大。

y 比 x 大意味着 x < y 为真，但不意味 y > x 为真。

x 与 y 相等往往不等价于 x == y 为真，与 x < y and y < x 为假等价

vector:
嵌套可变长数组
vector<vector<int>> v[3];

list 不支持根据下标随机访问，支持双向迭代器
push_front, pop_front,
sort // 成员函数，非算法中的 sort,因为算法中的 sort 需要随机访问迭代器, 而 list 不支持
remove(const T &val), remove_if, 

deque 双向队列，类似于 vector
相比于 vector 的优点是，vector 在头部删除或添加元素的速度很慢，在尾部添加元素的性能较好，而 deque 在头尾增删元素都具有较好的性能
push_front, pop_front

函数对象，如果一个类重载了 () 运算符。
class CAverage
{
public:
	double operator() (double x, double y, double z)
	{
		return (x + y + z) / 3;
	}
};
CAverage ca;
cout << ca(1.0, 2.0, 3.0); // ca.operator(1.0, 2.0, 3.0);

在 accumulate 算法中的应用
numeric 中的实现:
template<class T1, class T2, class OP>
T2 accumulate_ <T1 first, T1 last, T2 init, OP op>
{
  for(;first!=last;++first)
  {
    init = op(init, *first);
  }
  return init;
}

int op(int x, int y)
{
  return x * y;
}

vector<int> v;
v.push_back(1); v.push_back(2);
cout << accumulate_(v.begin(), v.end(), 1, &op); // op 还可以是函数对象

#include <iostream>
#include <algorithm>
using namespace std;

class A
{
public:
    int n;
    A(int n_) :n(n_) {}

};
// << 重载
ostream& operator<<(ostream & out, const A& a)
{
    out << a.n;
    return out;
}

bool GreaterA(const A & a1, const A & a2)
{
    return a1.n > a2.n;
}

template<class T1>
void PrintT1(T1 first, T1 last)
{
    for (; first<last;++first)
    {
        cout << *first << " ";
    }
    cout << endl;
}

int main(int argc, char* argv[])
{
    A a_array[] = { 2, -1, 100, 9 };
    sort(a_array, a_array + 4, GreaterA);
    PrintT1(a_array, a_array + 4);
    return 0;
}


### 关联容器
set 集合，不可有相同元素
multiset 可以有相同元素
map 每个元素包含关键字和值，不可有多个元素的关键字相同
multimap 多个元素的关键字可以相同

不可修改 set 或 multiset 元素的值，元素修改后，不能自动重新调整顺序，正确做法是先删除该元素，然后再添加元素。
同理，不可修改 map， multimap 元素的关键字。
关联容器元素或关键字比较大小可以用 < 运算符或者自定义的比较器，因为有序，所以查找速度快。

关联容器还有以下成员函数：
find, lower_bound, upper_bound, equal_range, count, insert

pair 类模板：
pair<int, double> p1(1, 2.0);
pair<string, int> p2("hello", 2);
pair<int, int> p3 = make_pair(1, 2); p3.first; p3.second;

string 类:
1. 构造函数
2. 赋值， assign
3. 长度， length, size 
4. 拼接, +, +=, append
5. 比较， < > == != <= >=, compare
6. 子串， substr
7. 交换， swap 
8. 查找子串和字符
9. 替换子串， replace
10. 删除子串， erase
11. 插入字符串, insert 
12. 将 string 对象作为流处理 istringstream, ostringstream
包含头文件 sstream
string src("test 1 2.0");
string s1;
int n1;
double n2;
istringstream istrstream(src);
istrstream >> s1 >> n1 >> n2;

ostringstream ostrstream;
ostrstream << s1 << n1 << n2 << endl;
cout << ostrstream.str();

13. STL 算法操作 string 对象
string 对象是顺序容器，支持随即访问迭代器
string::iterator str_it;
str_it = find(src.begin(), src.end(), '0');
if (str_it != src.end()) // found
sort(src.begin(), src.end());


容器适配器：
stack, queue, priority_queue 都是在顺序容器的基础上实现，突出一些功能， 屏蔽一些功能。
都有一下三个成员函数：
push, top, pop 

stack: 先进后出
#include <stack>
访问和删除都只能对栈顶的元素进行操作
成员函数：
void pop();
T & top();
void push(T & x);

例子： 十进制转二进制，除二取余，逆序排列
n%k; n/=k;
stack <int> stk;
int n = 10;
int k = 2;
while(n)
{
    stk.push(n%k);
    n /= k;
}

while(!stk.empty())
{
    cout << stk.top();
    stk.pop();
}

queue, priority_queue



内存地址空间：从低到高
TEXT 段： 整个程序的代码，以及所有的常量。
DATA 段： GVAR 段， 初始化为非零值的全局变量。
BSS 段： 初始化为 0 或未初始化的全局变量和静态变量
HEAP 段： 动态内存空间，使用 malloc, new 申请的内存
未使用的内存
STACK 局部变量，参数，返回值。函数调用时会参数入栈，局部变量入栈，调用结束一次出栈


1. 双目运算符 +， - 返回一个临时对象比较好
+=， -= 修改使用的对象比较好

operator const char *()
{
    //
}

如果类管理着动态分配的资源，除了构造函数和析构函数外，还需要实现复制构造函数，复制赋值运算符
如果不允许复制对象，将复制构造函数和复制赋值运算符声明为私有即可

2. 下标运算符
return_type& operator [](int Index)

3. 函数运算符 operator () 
void operator ()(string str)
{
    cout << str;
}

** 4. 移动构造函数，移动赋值运算符

5. 类型转换运算符
static_cast 用于向下, 向上转型（相关类型转换）。隐式转换转换为显式转换
用于指针时，实现基本的编译阶段检查
double pi = 3.14;
int num = static_cast<int>(pi);
继承情况下的，向下转换运行时可能出错，比如使用子类独有的成员

上转型是安全的，向下转型是不安全的。
dynamic_cast 例子：
void DetectFishType(Fish *pFish)
{
    Tuna *pTuna = dynamic_cast<Tuna *>(pFish);
    if (pTuna)
    {
        // 转换成功
    }
}

6. 使用宏定义定义常量，不如使用 const 和数据类型
宏定义最有用的功能之一， 避免多次包含

7. 宏函数可用于不同的变量类型，相比函数，减少代码量。而且性能优于函数调用。
缺点： 宏函数不支持任何形式的类型安全。
如果要编写独立于类型的泛型函数，又要确保类型安全，可以使用函数模板。如果需要改善性能，可以将函数声明为内联。

8. 模板函数调用无需指定数据类型，编译器可以自动推断。模板类需要显式指定数据类型

9. 模板类
template <typename T>
class TemplateClass
{
private:
    T Age;
};

// 具体化模板类
TemplateClass <long> tc1;
TemplateClass <int> tc2;

模板类的静态成员：
在 typename 参数相同的类实例之间共享
template<typename T>
class Class1
{
public:
    Class1()
    {
        static_assert(sizeof(T) != sizeof(int), "No int please"); // 禁止 int 类型具体化。float 误伤
    }
    static int Value;
};
template<typename T> int Class1<T>::Value = 1; // 静态成员必须初始化
int main()
{
    Class1<int> obj1;
    Class1<int> obj2;
    obj1.Value = 2;
    
    Class1<float> obj3;
    Class1<float> obj4;
    obj3.Value = 100;
    cout << obj2.Value << " " << obj3.Value << " " << obj4.Value << endl;
}

static_assert 禁止针对特定类型实例化。

10. STL, 算法

11. STL string 类
std::string 使用模板类 std::basic_string<T> 针对 char 和 wchar_t 具体化

构造函数,
string strPartialCopy(constCStyleString, 5); 前 5 个字符
string strRepeatChars(10, 'a');

访问字符串的字符内容，下标操作，或者迭代器

拼接字符串， +=， 或者 append 方法， append 接受 string 对象或者 C 风格字符串 

查找， string::npos 值为 -1，没有找到需要查找的元素

截短， erase 

反转， std::reverse 
reverse(str.begin(), str.end());

大小写转换：
transform

12. vector 
1. 特点： 在末尾添加，删除元素的时间固定。
在中间添加，删除元素的时间与该元素后面元素个数成正比
个数动态，该类负责管理内存

2. 实例化：
std::vector<int> obj1;
std::vector<Tuna> obj2;
迭代器： std::vector<int>::const_iterator it; // 不同 it 修改元素的迭代器
** 指定大小。大小和初始值。另一个类型相同的 vector。 迭代器
3. push_back() 末尾插入元素

静态数组风格初始化： vector<int> IntVect {1, 2, 3};
vector<int> IntVect = {1, 2, 3};

4. insert() 指定位置插入
IntVect.insert(IntVect.begin(), 2, 3) // 开始位置插入 2 个 3
IntVect.insert(IntVect.begin() + 1, AnotherVect.begin(), AnotherVect.end());

5. 访问 vector 元素，下标或者 at(), 或者迭代器
下标使用方式，类似于静态数组，读写元素
IntVect.at(2); // 运行阶段检查容器大小，越界将引发异常
迭代器，类似于指针的语法访问元素。

6. 删除 vector 中的元素
pop_back 删除最后一个元素

13. deque 
与 vector 相比， 可以 push_front, pop_front

14. list, forward_list 
list 是双向链表， forward_list 是单向链表，因此只能沿一个方向迭代
中间插入元素时间固定

iterator insert(iterator pos, const T& x);
insert(iterator pos, size_type n, const T& x);
insert(iterator, InputIterator, InputIterator);

erase 删除元素。输入为迭代器指向的元素。或者两个迭代器之间的元素（不包括末尾迭代器指向的元素）。


list::reverse() 成员函数，翻转 list, 之前的迭代器指向依然有效
list::sort 成员函数，排序 list, 一个无参数，另一个可以指定排序谓词。
remove 可以指定相等的谓词 == 重载 == 运算符
对于 list 存储对象的容器，提供 < 和 == 运算符，以提供默认的排序和删除谓词

forward_list 单向链表， 有 push_front 函数， 无 push_back 函数
不支持双向迭代，迭代器可以 ++， 不可以 --

15. set, multiset
对于 set, multiset 存储对象的容器，提供 < 和 == 运算符，以提供默认的排序谓词以及用于 find 等函数
查找复杂度为对数复杂度，插入要进行排序有开销
插入时进行排序，默认的排序谓词是 std::less
如果需要自定义排序谓词，需要在类中提供 bool operator()(const T&, const T&) 实现
template <typename T>
struct Mysort
{
    bool operator()(const T&obj1, const T&obj2)
    {
        return (obj1 > obj2);
    }
};
    set<int, Mysort<int> > setInt;
    setInt.insert(1);
    setInt.insert(2);
    Display(setInt); // 2 1

成员函数：
insert， 形参为元素的值，或者两个迭代器
count(element)
find 
erase(key), erase(itLowBound, itUpperBound), erase(it);


散列集合实现： unordered_set, unordered_multiset
头文件 unordered_set

16. map, multi_map, unordered_map, unordered_multimap
具体化：
map<int, string> map_obj;
插入：
mapobj.insert(make_pair(1, "1"));
mapobj.insert(pair<int, string>(2, "2"));
mapobj[3] = "3"
输出：
it->first; it->second;

multimap 中查找元素。count() 计算有多少个键相同的，然后递增迭代器
删除： erase
自定义排序谓词：实现 operator() 的类或者结构体
map, multimap 的查找复杂度为对数复杂度

unordered_map, unordered_multimap insert, find 时间固定


17. 函数对象
一元函数，形参一个，如果返回 bool， 称为一元谓词
二元函数同上

template<typename T>
void testFunction(const T& obj)
{
    cout << obj << endl;
}
// 计数状态
template<typename T>
class testClass
{
public:
    int Count;
    testClass(int Count_): Count(Count_){}
    testClass(): Count(0){}
    void operator()(const T& obj){
        Count++;
        cout << obj << endl;
    }

};

使用: 
testFunction("test");

testClass<string> obj;
obj("test2");

string s("hello world");
testClass<char> obj = for_each(s.begin(), s.end(), testClass<char>());
testClass<char> obj2 = for_each(s.begin(), s.end(), testClass<char>(0));
cout << obj.Count << endl; // 11

一元谓词：
template<class T>
struct isMu
{
    int d;
    isMu(int d_)
    {
        d = d_;
    }
    bool operator()(const T& obj) const{
        return (obj%d == 0);
    }
};
// 找出所有被某个数字整除的， find_if
vector<int> intVect {23, 24, 25, 26, 30};
auto it = find_if(intVect.cbegin(), intVect.cend(), isMu<int>(6));
// auto it = find_if(intVect.cbegin(), intVect.cend(), [](const int& obj)->bool{return (obj%6==0);}); 等效的 lambda
while (it != intVect.end())
{
    cout << *it << endl;
    it = find_if(it + 1, intVect.cend(), isMu<int>(6));
}

18. lambda 
捕获列表接受状态量的 lambda 表达式
int d = 2;
[d](d_){return (d/d_ == 0);}

19. STL 算法 
变序算法与非变序算法
find, find_if
auto it = find(vectInt.cbegin(), vectInt.cend(), NumToFind);
auto it = find_if(vectInt.cbegin(), vectInt.cend(), [](int ele){return (ele%2==0);});
// check it and vectInt.cend()

count, count_if


