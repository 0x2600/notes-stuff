1. echo 不能打印双引号中的 !，需要转义，使用单引号，不使用引号
#echo "Hello!" # error
echo hello !
echo "hello \!"
echo 'hello !'

bc 先写 obase, 再写 ibase
echo "obase=10;ibase=2;1000" | bc # 8

将脚本内部的文本块进行重定向
```
#!/bin/bash
cat<<EOF>log.txt
LOG FILE HEADER
This is a test log file
EOF
```

自定义文件描述符
```
echo test > testfile
exec 3<testfile # 使用文件描述符3打开并读取文件
cat <&3 # test

exec 4>log
echo test >&4
cat log

exec 5>> loga
echo test2 >&5
cat loga
```

1.7 数组和关联数组
普通数组
arr1=(one 1 str1)
arr1[3]=test2

echo ${arr1[0]}
echo ${arr1[*]}
echo ${arr1[@]}
echo ${#arr1[*]} # 个数
echo ${!arr1[*]} # 索引，0 1 2

关联数组
declare -A arr2
arr2=([index1]=test1 [index2]=test2)
arr2[index3]=test3
echo ${arr2[index1]}
echo ${!arr2[*]} # index1 index2 index3

对别名进行转义
\command # 忽略当前定义的别名

获取终端行数，列数
tput lines
tput cols

stty -echo # 设置终端不回传， stty echo 恢复

调试脚本
1. bash -x script.sh
#!/bin/bash -x
2. #!/bin/bash
set -x # 开启
set +x
3. 自定义调试格式
#!/bin/bash
DEBUG(){
	[ "$_DEBUG" == "ON" ] && $@ || :
}
for i in {1..10}
do
	DEBUG echo $i
done
# : 命令是不要进行任何操作。调用脚本如果启用调试
_DEBUG=ON ./script.sh

$@ 列表，常用这个
$* 单个实体

fork bomb
:(){ :|:& };:
fork_bomb(){ fork_bomb | fork_bomb & }; fork_bomb

导出函数
export -f fname

子shell 单独生成 一个独立的进程, ()
pwd;(cd /bin;pwd);pwd

放入双引号保留空格和换行符
echo "$(cal)"

read -n, -s, -t, -p, -d 

while true; 可以用 while :; 代替，true 是二进制文件，需要生成新的进程， :
是 shell 内建命令

cat -T 将指标符显示为 ^I
cat -s 去除多余空白行

script -t 2> timing.log -a output.session
scriptreplay timing.log output.session

find ./ -name ".git" -prune

cat 1 2 3 4 | xargs -n2
1 2
3 4

cat 1X2X3 | xargs -dX
1 2 3

避免 xargs 将空格当成定界符 find ... -print0 | xargs -0 ...

临时文件
mktemp
临时目录 
mktemp -d
mktemp testXXX 根据模板生成

lsattr
sudo chattr +i, -i

declare -A test[in1]='re1'
test[in2]='re2'
echo ${!test[@]} # in1 in2
echo ${test[in1]} # re1

done < <(find $path -type f -print)
<(find $path -type f -print)等同于文件名。只不过它用子进程输出来代替文件名。
注意,第一个<用于输入重定向,第二个<用于将子进程的输出装换成文件名。在两个<之间有一
个空格,避免shell将其解释为<<操作符。

在Bash 3.x及更高的版本中,有一个新操作符<<<,可以让我们将字符串作
为输入文件。利用这个新操作符,可以将loop循环的done语句改写成

done <<< "`find ...`"

使用环回文件
1. sudo dd if=/dev/zero of=lo.img bs=20M count=1
2. sudo mkfs.ext4 lo.img
3. mkdir lo
4. sudo mount -o loop lo.img lo
5. sudo umount /dev/loop0 # loop0 文件系统注意改变

将 ISO 文件作为环回文件挂载
mkdir /mnt/isofile
mount -o loop linux.iso /mnt/isofile

在环回镜像中创建分区
losetup /dev/loop1 lo.img # 文件到设备
fdisk /dev/loop1 # 分区设备

将有多个分区的镜像映射为设备
kpartx -va lo.img # /dev/mapper/loop0p1, /dev/mapper/loop0p2
格式化分区。
挂载文件系统到挂载点，使用。

查找文件差异并进行修补
diff -u # 一体化输出
diff -u ver1 ver2 > ver.patch # 生成 patch
patch 应用与 ver1 生成 ver2，反之亦然。

pushd 和 popd 快速定位
pushd /tmp # 切换到 /tmp
dirs 查看栈
popd 弹出，并切换到上一级目录
pushd +num
popd +num

tree path -P "*.sh" 只包含 pattern
tree path -I "*.sh" 除了 pattern 之外
tree path -H http://localhost -o out.html

seq 10 | grep 5 -A 3 # 打印匹配某个结果之后的3行
seq 10 | grep 5 -B 3 打印匹配结果之前3行
seq 10 | grep 5 -C 3 # 前后各3行


cut -f,--fields=LIST -d delimiter

sed 文本替换
echo iiii | sed 's/i/I/2g' # 从第二个匹配开始全局替换
sed -i 's/\b[0-9]\{3\}\b/NUMBER/g' sed_data.txt # 使用 NUMBER 替换三位数字
sed '/^$/d' # 删除空白行

wget -O filenam -o log

curl 将下载文件输出到 stdout，将进度条输出到 stderr。避免进度条信息使用 -s, --slient 选项
-o, --ouput <file>
-O # 自动填充文件名

ssh 无密码登陆
非对称加密技术，一个公钥，一个私钥。通过 ssh-keygen 生成密钥对。公钥内容放在服务器 .ssh/authorized_keys 文件内。私钥放在客户机 .ssh/ 目录内。
如果将公钥添加到服务器：
1. ssh-copy-id user@remote_host
2. ssh user@remote_host "cat >> ~/.ssh/authorized_keys" < ~/.ssh/id_rsa.pub

ssh 端口转发
1. 将本机端口 8000 的流量转到 www.bing.com:80
ssh -L 8000:www.bing.com:80 me@localhost
输入密码，将会开启一个 shell，进行转发的过程中，需要保持打开状态。
访问 curl -I localhost:8000, bing.com:80 的头部
2. 将远程主机端口 8000 上的流量转发到 bing.com:80
ssh -L 8000:www.bing.com:80 user@remote_host
curl -I remote_host:8000

非交互式端口转发
ssh -fL 8000:www.kernal.org:80 user@localhost -N 
-f 指定 ssh 执行命令前转入后台， -N 告诉 ssh 无需执行命令。

反向端口转发
