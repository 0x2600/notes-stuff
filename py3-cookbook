1.1 解压序列赋值给多个变量
作用于任何可迭代对象，列表，元组，字符串，文件对象，迭代器，生成器。
data = ['ACME', 50, 91.1, (2012, 12, 21)]
_, shares, price, year, _, day = data # shares = 50, price = 91.1, year = 2012, day = 21

1.2 解压可迭代对象赋值给多个变量
1)
def drop_first_last(grades):
    first, *middle, last = grades
    return avg(middle)

2) 
records = [('foo', 1, 2), ('bar', 'hello'), ('foo', 3, 4)]
def do_foo(x, y):
    print('foo', x, y)

def fo_bar(s):
    print('bar', s)

for tag, *arg in records:
    if tag == 'foo':
        do_foo(*arg)
    elif tag == 'bar':
        do_bar(*arg)

3) 解压一些元素并丢弃
record = ('ACME', 50, 123.45, (12, 18, 2012))
name, *_, (*_, year) = record #name ACME, year 2012

1.3 保留最后 N 个元素
1.4 查找最大或最小的 N 个yuansu
headq 模块的 nlargest(), nsmallest(), 可接受一个关键字参数
import headq
nums = [1, 2, 3, 7, 8, 9]
print(headq.nlargest(3, nums))
print(headq.nsmallest(3, nums))

1.6 字典中的键映射多个值 multidict
d = {
    'a': [1, 2, 3]
    'b': [4, 5]
}
e = {
    'a': {1, 2, 3}
    'b': {4, 5}

}

from collections import defaultdict
d = defaultdict(list)
d['a'].append(1)
d['a'].append(2)

1.7 字典排序
在迭代或序列化这个字典时能够控制元素的顺序
from collections import OrderedDict
d = OrderDict()
d['foo'] = 1
d['bar'] = 2
d['spam'] = 3
d['grok'] = 4
# ouput "foo 1", "bar 2", "spam 3", "grok 4"
for key in d:
    print(key, d[key])
OrderedDict 内部维护一个根据键插入顺序排序的双向链表，对于一个已经存在的键的重复赋值不会改变键的顺序。一个 OrderedDict 的大小是普通字典的两倍，它的内部维护着另外一个链表。

1.8 字典的运算
prices = {'A': 2, 'B': 1}
min_price = min(zip(prices.values(), prices.keys())) # (1, B)
max_price = max(zip(prices.values(), prices.keys())) # (2, A)

min(prices, key = lambda x: prices[x]) # B
prices[min(prices, key = lambda x: prices[x])] # 1

1.9 查找两字典的相同点
a = {'x': 1, 'y': 2, 'z': 3}
b = {'w': 10, 'x': 12, 'y': 2}
# dict.keys() 返回类集合对象
a.keys() & b.keys() # {'x', 'y'}
a.keys() - b.keys() # {'z'}
a.items() & b.items() # {'y': 2}

# 过滤字典
c = {key: a[key] for key in a.keys() - {'z', 'w'}} # {'x': 1, 'y': 2}

dict.keys() 可以进行集合操作。 dict.items() 集合操作， 可以用来查找两个字典相同的键值对。 dict.values() 不能保证值互不相同，不建议集合操作。






4.1 手动遍历迭代器
with open('somefile', 'rt') as f:
    try:
        while True:
            line = next(f)
            print(line, end = '')
    except StopIteration:
        pass

with open('somefile', 'rt') as f:
    while True:
        line = next(f, None):
        if line == None:
            break
        print(line, end = '')
		
4.2 代理迭代
class Node:
    def __init__(self, value):
        self._value = value
        self._children = []

    def __repr__(self):
        return 'Node({!r})'.format(self._value)
    
    def add_child(self, node):
        self._children.append(node)

    def __iter__(self):
        return iter(self._children)


if __name__ == "__main__":
    root = Node(0)
    child1 = Node(1)
    child2 = Node(2)
    root.add_child(child1)
    root.add_child(child2)

    for ch in root:
        print(ch)
        
# outpu: Node(1)\nNode(2)\n

4.3 使用生成器创建新的迭代模式
def frange(start, end, step):
    x = start
    while x < stop:
        yield x
        x += step

def countdown(n):
    while n > 0:
        yield n
        n -= 1
    print('Done')

4.4 实现迭代器协议




