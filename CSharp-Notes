1. 枚举类型
不可以定义在方法中。定义在类中或者命名空间下。(同结构体类型)
public enum Option: int
{
  opt1 = 1,
  opt2 = 2
}

Console.WriteLine((int)Option.op1);

2. 结构体类型
结构体成员：
属性，方法，事件
也可以有构造器：必须有参数，且为结构体中的字段赋初值。

3. 数组
初始化：
int[] a = new int[3];
int[] a = new int[] {1, 2};

多维数组：
int[2, 2] a = {{1, 2}, {3, 4}};
a[1, 1] = 100;

锯齿形多维数组：
int[][] a = new int[2][];
a[0] = new int[] {1, 2};
a[1] = new int[] {1};
a[1][0] = 100;

4. Object 类
所有类的祖先类。四个方法
Equals(object obj1, object obj2); // 静态方法，还有一个实例方法
GetHashCode // 实例方法
GetType // 返回 System.Type 类型，是实例方法
ToString

5. 继承
public classA: classB
{

}
调用基类隐藏的方法:
base.func();
子类中如果有意隐藏基类的方法，使用关键字 new: 
public new void func()
{}

6. 多态
virtual, new, override 

7. 抽象 abstract
抽象方法必须定义在抽象类中，抽象类包含抽象方法，也可以包含非抽象方法。
抽象方法定义时无须实现，尤其子类实现。

8. sealed 密封类和密封方法
密封方法不能被重写，密封类不能被继承
public abstract class AreaAbstract
{
    public abstract double Total();
}

public class Rect : AreaAbstract
{
    public double Width { get; set; }
    public double Length { get; set; }
    public sealed override double Total() // 不能被重写
    {
        return Width * Length;
    }
}

public sealed class Circle : AreaAbstract // 不能被继承
{
    public double R{get; set;}
    public override double Total()
    {
        return 3.14 * R * R;
    }
}

9. 继承关系中构造器
子类默认调用父类的无参构造器，也可以显式调用父类构造器
public ClassA(int a_, int b_):base(a_)
{
  b = b_;
}

10. 接口，一个类可以实现多个接口
interface ICompute
{
  double R{get;set;}
  double Area();
}
接口成员不能使用 public, private, protected, internal, static, virtual, abstract, sealed 修饰

接口的实现：
1. 实现所有的成员
2. 定义抽象类，实现部分成员，未实现成员以抽象方式实现
实现接口的成员：
1. 隐式实现，
interface ICompute
{
	int Id{set; get;}
	void Greet();
}

class ComputeTest : ICompute
{
	public int Id{set; get;}
	public void Greet()
	{
		Console.WriteLine("Hello");
	}
}

// call
ICompute com = new ComputeTest();
com.Greet();

2. 显式实现
class ComputeTest: ICompute
{
	int ICompute.Id{set;get;}
	void ICompute.Greet()
	{
		;
	}
}


11. 集合
Queue:
Enqueue(object o);
Dequeue();
ToArray();
IEnumerator it = queue.GetEnumerator();
while(it.MoveNext())
{
	it.Current();
}

Stack:
Push(object o); Pop()
GetEnumerator();

Hashtable:
foreach(DictionaryEntry d in hash_)
{
	// d.Key
	// d.Value
}

SortedList

12. 泛型 System.Collections.Generic
可空类型：值类型可空
System.Nullable<int> a = null;
int? a = null;
if(!a.HasValue)
{
	// null
}

泛型方法：
public void Add<T> (T a, T b)
{
	double sum = double.Parse(a.ToString()) + double.Parse(b.ToString());
    Console.WriteLine(sum);
}

```c++
template<typename T>
void Add(T a, T b)
{
	double sum = (double)a + (double)b;
	std::cout << sum << "\n";
}
```

泛型类：
class GeTest<T>
{
	T m_field;
}

GeTest<int> ge_ = new GeTest<int>();

泛型集合：
非泛型集合 ArrayList, Hashtable
对应泛型集合： List<T>, Dictionary<K, V>

比较器实现 IComparer<T> 接口，重写 int Compare(T o1, T o2);
集合的排序调用: List.Sort(new IComparerImpl());
其中比较器实现的类： IComparerImpl: IComparer<Student>

 或者自定义的类实现 IComparable<Student> 接口，实现 int CompareTo(Student t) 方法
 List.Sort();

13. 文件 System.IO
1. DriveInfo 磁盘信息相关
2. DirectoryInfo
3. Directory 静态类
4. FileInfo
5. File 静态类
6. Path 用于文件路径的静态类
8. StreamReader
9. StreamWriter
10. FileStream
11. BinaryReader(Stream input);
12. BinaryWriter(Stream output);

14. 委托和事件
14.1 命名方法委托
1. 类中定义委托
class Program
{
	public delegate void MyDelegate();

	static void Main(string[] args)
	{
		//
		MyDelegate dele_ = new MyDelegate(Foo.foo);
		dele_();

		MyDelegate dele__ = new MyDelegate(new Foo().bar);
		dele__();
	}
}

class Foo
{
	public static void foo()
	{
		Console.Write("static\n");
	}

	public void bar()
	{
		Console.Write("instance method\n");
	}
}


类似于1. 函数指针定义 typedef
2. 函数指针赋值
3. 函数指针调用

14.2 多播委托
public delegate void MyDelegate();

MyDelegate dele_ = new MyDelegate(Foo.foo);
dele_ += new Foo().bar;
dele_ -= Foo.foo;

dele_();

注： 不同实例有不同的实例方法

14.3 匿名委托
public delegate void MyDelegate();
MyDelegate dele___ = delegate
{
	Console.WriteLine("Anonymous delegate");
};

dele___();

事件：
public event MyDelegate MyEvent;
MyEvent = new MyDelegate(ClassA.StaticMethod);
instance_.TriggerEvent();
事件的定义和调用如果不在同一个类中， +=， -= 操作

