## shell 基础
第一层命令提示符，第二层命令提示符。

在新进程中运行 shell 脚本
./sc.sh
bash sc.sh
检查 PID，$$

在当前进程中运行 shell 脚本
source sc.sh 
. sc.sh 

## shell 编程
### 变量
变量都是字符串来存储的，除非 declare 显式定义变量的类型。

定义变量
var=value # 用于值不包含空白符的情况，= 周围不能有空格
var='value'
var="value"
命名规范
数字字母下划线
不能以数字开头
不能使用 shell 保留的关键字 (help)

访问变量
${var}, {} 帮助解释器识别变量的边界

只读变量
readonly var
# var=newvalue 出错

删除变量, 不能删除 readonly 变量
unset var

$(()) 数学计算

命令替换的输出中如果包含多行或者多个连续的空白符，输出变量使用双引号扩住，否则换行无效，空白被压缩成一个。

反引号和 $(), $() 支持嵌套，反引号不行

特殊变量
$0 脚本文件名
$n 传递给脚本或者函数的参数
$# 传递给脚本或者函数的参数个数
$* 传递给脚本或者函数的所有参数
$@ 传递给脚本或者函数的所有参数
$? 上个命令的退出状态，或函数的返回值
$$ 当前 shell 进程 PID

字符串
1) ''，原样输出，内部不能出现单引号，转义也不行
2) ""，可以出现双引号，只要被转义
3) 不被包围的字符串，不能出现空格，变量替换有效

获取字符串长度
${#string_name}

字符串拼接，直接并排放一起，中间无空格，或者双引号扩起，那么中间可以有空格。

字符串截取
1) 指定位置，截取方向都是从左到右
从左边开始计数
${str:start:length} 从0开始索引，不包含 end
str="0123"
echo ${str:0:2} -> 01
${str:0-start:end}
从右边开始计数
${str:0-start:length}
str="321"
echo ${str:0-3:2} -> 32

2) 从指定字符开始截取，从子串截取到字符串末尾
# 截取右边字符
${str#*chars}
str="http://3.cn"
echo ${str#*:} -> //3.cn
echo ${str##*/} -> 3.cn

% 截取左边字符 ${str%chars*}
${str%%/*} -> http:
${str%/*} -> http:/

数组
定义： (), 元素之间空格分割,元素类型可不同
array_name=(ele1 ele2)

访问数组元素 ${array_name[index]}
${array_name[*]} # 所有元素
${array_name[@]}
${array_name[-1]}
获取数组长度 ${#array_name[@]}
${array_name[*]}

数组拼接
arr3=(${arr1[*]} ${arr2[*]})
echo ${arr3[*]}

删除数组元素，整个数组
unset arr[index]
unset arr

echo [-ne] ARGS
-n 不换行
-e 使能转义

read [opotios] [name ...]
-p prompt
-s do not echo input
-n nchars 读取 nchars 个字符后立即返回
-t timeout

exit [n], 没有 N, exit status 是上一条指令的执行结果。
```
bash
ls /bin/usr 2>/dev/null
exit
echo $? # 2
```

declare, typeset(废弃)
declare [options] [name[=value] ...]
-p 显示 name 属性
-a to make NAMEs indexed arrays
-i integer
-r readonly
-x to make NAMEs export

数学计算
运算符
+, ++, -, --, *, /, **, %, ++, --, 
!, &&, ||
<, <=, >, >=, ==, !=
<<, >>, ~, |, &, ^
=, +=, -=, *=, /=, %=

数学计算命令
(()) 整数运算，逻辑运算， bc 整数和小数
let 整数运算
$[]

在 (()) 使用变量无需 $, 多个表达式以逗号分开，最后一个表达式的结果作为整个语句的执行结果。
a=1
b=2
((c=a+b))

let 表达式， 多个表达式以空格分开
let "表达式"
let '表达式'
let x+y 结果会丢弃，也不会返回结果

选择结构 if...else, case...in
condition 本质是命令的退出状态
if condition
then
    statements
fi

if condition; then
    statements
fi

if condition
then
    statements
else
    statements
fi

if condition
then
    statements
elif condition2
then
    statements
else
    statements
fi

test 命令， [ expr ] 两个空格必须
对数值，字符串，文件检测
File operators:
-a file, exist
-d file, directory
-e file, exist
-f file, exist and regular file
-h, -L file, symbolic link
-p file, named pipe
-r file, readable by you
-s file, exist and not empty
-S file, socket
-w file, writable by you
-x file, executable by you

FILE1 -nt FILE2, newer than
FILE -ot FILE2, older than
FILE -ef FILE2, file1 is a hard link to file2

String operators:
-z string, string is empty
-n string, not empty
string1 = string2, ==, != 
string1 < string2
string1 > string2

算术运算，整数
arg1 OP arg2, OP can be:
-eq, -ne, -lt, -le, -gt, -ge.

逻辑运算
if [ -z "$str1" ] || [ -z "$str2" ]; then
if [ -z "$str1" -o -z "$str2" ]
! EXPR
EXPR1 -o EXPR2
EXPR1 -a EXPR2

test 中变量建议使用双引号括起来
test -z $str, 如果 str 为空， 传递给 test 命令的参数个数不够
test -z "$str"

[[ expr ]] 两个空格必须
逻辑运算
[[ -z $str1 || -z $str2 ]]
[[ -z $str1 -o -z $str2 ]] # 错误用法

[[ ]] 支持正则表达式
[[ $tel=~^1[0-9]{10} ]]

case in 语句
case $num in
    1)
        echo "."
        ;;
    2) 
        echo ".."
        ;;
    *)
        echo "*"
        ;; # 可有可无
esac

while 语句
while condition
do 
    statements
done

util 语句，条件为假时执行循环体语句，为真停止执行
util condition
do 
    statements
done

for 语句
C 语言风格
for ((exp1; exp2; exp3))
do 
    statements
done

```
sum=0
for((i=0;;i++))
do
    if((i>100)); then
        break
    fi
    ((sum+=i))
done
echo $sum
```

python 风格， for in
for var in value_list
do
    statements
done

value_list 说明
1) 直接给出具体的值，空格分开
2) 取值范围， {start..end}，支持数字和字母
3) 命令的执行结果
4) shell 通配符展开
for filename in *.sh; do...

5) 特殊变量 $*, $@
function foo(){
    for i in $@ # for i, 省略 in value_list
    do
        statements
    done
}

select in，用户输入不在编号之内，赋空值。
select var in value_list
do
    statements
done

PS3 #?

break
break n，跳出 n 层循环，省略参数跳出当前循环

函数
$? 接收函数 return value
function foo(){
    statements
    [return value]
}

foo(){
    statements
    [return value]
}

function foo{
    statements
    [return value]
}
调用 
foo
foo param1 param2 ...
没有限制定义和调用的顺序 # 测试 bash, sh 要先定义后调用
```
getsum(){
    local sum=0
    for i in $@
    do
        ((sum+=i))
    done
    return $sum
}

getsum 1 2 3 4
echo $? # 10
```
```
getsum(){
    local sum=0
    for i in $@
    do
        ((sum+=i))
    done
    echo $sum
    return 0
}
echo $(getsum 1 2 3 4) # 10
```

代码块重定向

while read str; do
    echo $str
done < filename








