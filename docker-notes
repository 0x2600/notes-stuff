3. Docker 入门
3.1 确保 Docker 已经就绪
$ sudo docker info

3.2 运行我们的第一个容器
$ sudo docker run -i -t ubuntu /bin/bash
-i 标志 STDIN 是开启的， -t 分配伪 tty 终端

3.3 使用第一个容器
使用完成 exit 停止运行
docker ps -a

3.4 容器命名
sudo docker run --name bob_the_container -i -t ubuntu /bin/bash
docker rm 

3.5 重新启动已经停止的容器
sudo docker start bob_the_container
sudo docker start <ID>
or: docker restart
Note: docker create 创建容器，并不运行
3.6 附着到容器上
Docker 容器重新启动的时候会沿用 docker run 命令时指定的参数来运行，因此我们的容器重新启动后会运行一个交互式会话 shell。
附着正在运行的容器: docker attach bob_the_container/or: docker attach <ID>

3.7 创建守护式容器(daemonized container)
sudo docker run --name daemon_dave -d ubuntu /bin/sh -c 'while true; do echo hello world; sleep 1; done'
Note: -d

3.8 容器内部都在干什么
获取守护式容器的日志: 
sudo docker logs [-f] daemon_dave # ^ C 退出日志跟踪
docker logs --tail 10 daemon_dave
docker logs --tail 0 -f daemon_dave
sudo docker logs -ft daemon_dave # -t 加时间戳

3.9 Docker 日志驱动
在容器级别启动 Syslog 将会禁用 docker logs
sudo docker run --log-driver='syslog' --name daemon-dave -d ubuntu /bin/sh -c "<command>"
默认 json-file

3.10 查看容器内的进程
查看守护式容器的进程
sudo docker top daemon_dave

3.11 Docker 统计信息
sudo docker stats daemon_dave daemon_kate daemon_clare daemon_sarah

3.12 在容器内部运行进程
后台进程和交互式任务
在容器内运行后台任务:
sudo docker exec -d daemon_dave touch /etc/new_config_file
-d 后台进程 

在容器内运行交互命令
sudo docker exec -t -i daemon_dave /bin/bash

3.13 停止守护式容器
sudo docker stop daemon_dave # or <ID>

3.14 自动重启容器
sudo docker run --restart=always --name daemon_dave -d ubuntu /bin/sh -c "<command>"
or 指定重启次数 --restart=on-failure:5

3.15 深入容器
docker inspect

sudo docker inspect --format='{{ .State.Running }}' daemon_dave
sudo docker inspect --format='{{ .NetworkSettings.IPAddress }}' daemon_dave bob_the_container

3.16 删除容器
sudo docker rm <ID>
删除所有容器:
sudo docker rm `sudo docker ps -a -q` # -q 只返回容器的 ID


4. 使用 Docker 镜像和仓库

4.1 什么是 Docker 镜像

4.2 列出镜像
sudo docker images
拉取镜像: sudo docker pull ubuntu:12.04
运行一个带标签的 Docker 镜像
sudo docker run -t -i --name new_container ubuntu:12.04 /bin/bash

4.3 拉取镜像
sudo docker pull fedora:20
sudo docker images fedora
sudo docker pull fedora:21

4.4 查找镜像
sudo docker search puppet
sudo docker pull jamtur01/puppetmaster
sudo docker run -i -t jamtur01/puppetmaster /bin/bash

4.5 构建镜像
1) docker commit
2) docker build/Dockerfile

4.5.1 创建 Docker Hub 账号
sudo docker login

4.5.2 用 Docker 的 commit 命令创建镜像
先从创建容器开始
sudo docker run -i -t ubuntu /bin/bash
在容器中安装 Apache 
apt-get -yqq update
apt-get -y install apache2

保存当前状态
先 exit 从容器退出， 之后运行 docker commit
sudo docker commit <container_ID> jamtur01/apache2

查看新创建的镜像
sudo docker images jamtur01/apache2

提交镜像时指定更多的数据
sudo docker commit -m "A new custom image" -a "James Turnbull "\
<container_ID> jamtur01/apache2:webserver
-m 提交信息
-a 作者信息
制定镜像的用户名仓库名标签

查看该镜像的详细信息
sudo docker inspect jamtur01/apache2:webserver
从刚创建的镜像运行一个容器
docker run -i -t jamtur01/apache2:webserver /bin/bash

4.5.3 用 Dockerfile 构建镜像
第一个 Dockerfile
mkdir static_web
cd static_web
touch Dockerfile

static_web (构建环境，构建上下文)

Dockerfile 示例
```
# Version 0.0.1
FROM ubuntu:14.04
MAINTAINER James Turnbull "james@example.com"
RUN apt-get update && apt-get install -y nginx
RUN echo 'Hi, I am in your container' \
> /usr/share/nginx/html/index.html
EXPOSE 80
```

FROM 指定一个基础镜像
默认情况下 RUN 会在 shell 里使用命令包装器 /bin/sh -c 来执行， 如果希望在不支持 shell 的平台或者不希望在 shell 运行，可以使用 exec 格式的 RUN 指令

RUN ["apt-get", "install", "-y", "nginx"]

4.5.4 基于 Dockerfile 构建新镜像
cd static_web
sudo docker built -t="jamtur01/static_web:v1" .

-t 设置仓库和名称标签
最后的 . 告诉 Docker 到本地目录 Dockerfile 文件。也可以指定一个 Git 仓库的源地址来指定 Dockerfile 的位置(前提是 Dockerfile 存在于这个仓库的根目录)
sudo docker build -t="jamtur01/static_web:v1" git@github.com:jamtur01/docker-static_web
也可以 -f 标志指定 Dockerfile 的位置

如果在构建上下文的根目录存在以 .dockerignore 的文件，文件内容会被按行分割

4.5.5 指令失败时会怎样

调试失败
docker run 基于最后一次构建成功的镜像 ID
docker run -i -t <image_ID> /bin/bash

4.5.6 Dockerfile 和构建缓存
不使用缓存: docker build --no-cache
sudo docker build --no-cache -t="jamtur01/static_web"

4.5.7 基于构建缓存的 Dockerfile 模板
Dockerfile 文件顶部增加包仓库或者更新包，从而尽可能确保缓存命中
···
FROM ubuntu:14.04
MAINTAINER James Turnbull "james@example.com"
ENV REFRESHED_AT 2014-07-01
RUN apt-get -qq update
···
ENV 在镜像中设置环境变量， REFRESHED_AT 表明该镜像模板最后的更新时间
如果想刷新一个构建，只需修改 ENV 指令中的日期
···
FROM fedora:20
RUN yum -q makecache
···
4.5.8 查看新镜像
列出新的 Docker 镜像
sudo docker images jamtur01/static_web
sudo docker history <image_ID> # 查看构建的每一层
4.5.9 从新镜像启动容器
sudo docker run -d -p 80 --name static_web jamtur01/static_web nginx -g "daemon off;"
-d detached 后台运行， 在容器中运行的命令 nginx -g "daemon off;" 以前台运行的方式启动 nginx, -p 控制 Docker 运行时公开哪些网络端口给外部，两种方法
1. 在宿主机随机选择 32768 - 61000 的端口
2. 在宿主机上指定一个具体的端口号来映射容器的 80 端口
使用 docker ps 看容器的端口分配情况
sudo docker ps -l
sudo docker port <container_ID> 80
sudo docker port static_web 80 # 使用容器名
sudo docker run -d -p 80:80 --name static_web jamtur01/static_web nginx -g "daemon off;" # -p 指定将容器中的端口映射到宿主机的某一特定端口
绑定到特定的网络接口(IP 地址)
sudo docker run -d -p 127.0.0.1:80:80 --name static_web jamtur01/static_web nginx -g "daemon off;"
-p 127.0.0.1::80 绑定到特定的网络接口的随机端口
-P 对外公开在 Dockerfile 中通过 EXPOSE 指令公开的所有端口
sudo docker run -d -P --name static_web ...
4.5.10 Dockerfile 指令






