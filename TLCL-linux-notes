https://billie66.github.io/TLCL/

# TLCL Linux Notes
### 虚拟终端/控制台
Ctrl+Alt+F1~F6  
图形桌面 Alt-F7
### cd
cd -  
cd ~username
### * 0/1+
? 1  
[char] 1  
[!char]  
[[:class:]] class: alnum, alpha, digit, lower, upper  
*
g*  
b*.txt  
Data???  
[abc]*  
BACKUP.[0-9][0-9][0-9]  
[[:upper:]]*  
[![:digit:]]*  
*[[:lower:]123]  
### cp
cp -a, --archive  
cp -i, --interactive  
cp -r, -R, --recursive = -a  
cp -u, --update  
cp -v, --verbose  
cp -r dir1 dir2  
### ln target link_name
hard link 缺点  
不能跨分区  
不能为目录创建 hard link
### 命令分类
可执行程序, shell builtins, shell 函数, alias    
使用 type 命令确定  
### which 可执行程序位置, 不包括 builtins, alias
help 用于 shell builtins, ex. help cd  
### man over less 分节
man 5 passwd
### apropos, man -k 
### whatis 
### info
info coreutils
### 创建 alias 前， 先用 type 检查是否会发生命名冲突
alias foo="bar"  
unalias foo
### stdout, stderr 连接屏幕
stdin 连接键盘  
标准输出重定向

`command > filename` 
stdin 0
stdout 1
stderr 2
`ls -l /bin/usr 2> ls-err`
stdout, stderr 重定向到同一个文件
`ls -l /bin/usr > ls-output 2>&1 # strerr 在 stdout 重定向之后`
`ls -l /bin/usr &> ls-output`
stdin redirect:  
`command < filename` 把 stdin 源从键盘改到文件
### 管道 |
`com1 | com2`
com1 的 stdout 作为 com2 的 stdin
com2 可以是 head, tail, grep, less, sort, uniq, wc
### 过滤器: 几个命令组成管道线
`ls /usr/bin | sort | less`
`ls /usr/bin | sort | uniq | less`
### wc filename
-l -w -c 行数 单词数 字节数
### grep pattern [file...]
-i 忽略大小写  
-v 打印不匹配的行
### head -n 5 filename
`tail -n 5 filename`
`ls /usr/bin | tail -n 5`
`tail -f /var/log/messages`
### tee
从 stdin 读入， 同时输出到 stdout 和文件， tee filename
### 字符展开
`echo *` 当前目录文件
### 路径名展开
`ls -A` 不包括 ., ..
`echo .[!.]?*` 列出隐藏文件
### 波浪线展开
echo ~gary /home/gary
### 算术表达式展开
`echo $((2+2)) # 可以有空格`
`+ - * / % **` 地板除

### 花括号展开
`echo Front-{A,B,C}-Back # 不能有空格` 
`mkdir {2009..2019}-{0{1..9},{10..12}} # 不能有空格`

### 参数展开
`printenv | less`
`echo $USER`

### 命令替换
```shell
echo $(ls)
ls -l $(which cp)
file $(ls /usr/bin/* | grep zip)
```
旧版 ls -l `which cp`

### 引用
双引号内，参数展开，算数表达式展开，命令替换有效  
```shell
echo this is a test # 四个参数 
echo "this is a test" # 一个参数 
echo $(cal) # 38个参数 
echo "$(cal)" # 一个参数  
```
单引号 禁止所有的展开  
转义字符 在双引号内阻止展开

```shell
echo "\$5.00"
echo -e "a\ta" #a   a
echo "a"$'\t'"a" #a a
```

-e, $''

### 键盘高级操作技巧
命令行编辑 readline  
ctrl e # 行尾  
ctrl a # 行首  
alt f 右移一个字  
alt b  

### 权限
id - uid, gid, groups

### 文件类型
-  
d  
l 总是 rwxrwxrwx  
c  
b  

### 权限属性
|   | file  |  directory |
| --- | --- | --- |
| r | 打开读取 | 列出，前提有 x 权限 |
| w | 写入，截断。重命名，删除(目录决定) | 在目录下新建，删除 重命名，前提 x |
| x | 允许作为程序执行 | 进入目录 | 

### chmod
u user  
g group  
o others  
a u+g+o  
`+ - =`

### umask 设置默认权限

### setuid 4000
setgid 2000  
sticky 1000 (目录设置 sticky 用户不能 rm/mv)  
ex.
`chmod u+s`
`chmod g+s`
`chmod +t`

### su, 重新启动一个 shell 
`su -`
`su - root`
`su -c 'com' # 单引号阻止展开`

### sudo, 不会启动一个 shell, 不必单引号扩起来
`sudo -l # 列出授予权限`

### chown
bob  
bob:users  
bob:  
:admins  

### chgrp, chown 可以完成 chgrp 任务

### Shell 环境
1. 配置文件
2. 环境变量

`printenv`, `set`, `export`, `alias`

| 环境变量 | Shell 变量 |
| --- | --- |
| set, printenv | set |

```shell
printenv | less
printenv USER
set | less
echo $USER
```

建立 Shell 环境  

1. 登录 Shell 
2. 非登录 Shell

```
/etc/profile
~/.bash_profile
~/.bash_login
~/.profile
```

```
/etc/bash.bashrc
~/.bashrc
```

## vi

移动光标  
0  
^  
$  
w  
W  
b  
B  
^ f  下一页  
^ b  上一页  
nG  
G  最后一行  
gg  第一行  
A 本行行尾插入  
o 插入空行  
O  

删除  
x  
3x  
dd  
5dd  
dW  
d$  
d0  
d^  
dG  
d3G  

复制  
yy  
3yy  
yW  
y$  
y0  
y^  
yG  
y20G  
J 连接行  
查找和替换

fc ; 重复  
`:%s/Line/line/g`  
`:1,5s/Line/line/gc`

编辑多个文件

`vi file1 file2`  
`:n`  
`:N`  
`:buffers`  
`:buffer n`  
`:e`  

跨文件复制粘贴  
插入整个文件到当前编辑文件  
`:r file1`

## PS1 Shell 提示符
`export PS1='\u@\h \w: \$'`  
颜色  
`RED='\[\033[0;30m\]'`  
`RED='\[\033[1;30m\]'`  
`NORMAL='\[\033[0m\]'`  
30-37  
背景颜色  
40-47  

## 正则表达式
grep  
-i   
-v  
-c, --count  
-n  
-l 打印包含匹配项的文件名 -L 相反  
-h 多文件搜索，不输出文件名  

元字符和原义字符  
`grep bzip file1`  
bzip 是原义字符

元字符: `^ $ . [ ] { } - ? * + ( ) | \`  
注意: 许多正则表达式的元字符对 shell 有特殊含义，为了防止 shell 展开，需要使用引号将其引起  
. 任何字符，1个  
^ $ 锚点  
中括号表达式和字符类   `grep -h '[bg]zip' dirlist*.txt`  
中括号中的插入字符 ^ 表示否定
中括号中的连字符 - 表示字符范围
`grep -h '[^bg]zip' dirlist*`  
它们的文件名都包含字符串“zip”，并且“zip”的前一个字符 是除了“b”和“g”之外的任意字符。注意文件 zip 没有被发现。一个否定的字符集仍然在给定位置要求一个字符， 但是这个字符必须不是否定字符集的成员。插入字符如果是中括号表达式中的第一个字符的时候，才会唤醒否定功能；否则，它会失去 它的特殊含义，变成字符集中的一个普通字符。  
字符区域  
`grep -h '^[A-Z]' dirlist*`  
`grep -h '^[A-Za-z0-9]' dirlist*`  
`grep -h '[A-Z]' dirlist*.txt`  
`grep -h '[-AZ]' dirlist*.txt`  

POSIX 字符集  
[:alnum:]  
[:word:]  
[:alpha:]  
[:blank:]  
[:cntrl:]  
[:digit:]  
[:lower:]  
[:upper:]  

POSIX 基本正则表达式与 POSIX 扩展正则表达式  
BRE: `^ $ . [ ] *`  
ERE: `( ) { } ? + |`  
扩展正则表达式 egrep, grep -E  

交替 |  
`grep -Eh '^(bz|gz|zip)' dirlist*`
`grep -Eh '^bz|gz|zip' dirlist*`

限定符  
？ 0, 1  
(nnn) nnn-nnnn  
nnn nnn-nnnn  
`grep -E '^\(?[0-9][0-9][0-9]\)? [0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]$'`

\* 0 或多个  
\+ 1 或多个
## 软件包管理
常见软件包管理任务
查找资源库中的软件包
apt-get update ; apt-cache search search_string
yum search search_string
从资源库中安装一个软件包
apt-get update;apt-get install package_name
yum install package_name
通过软件包文件来安装软件
dpkg --install package_file
rpm -i package_file
卸载软件
apt-get remove package_name
yum erase package_name
经过资源库来更新软件包
apt-get update;apt-get upgrade
yum update
经过软件包文件来升级软件
dpkg --install package_file
rpm -U package_file
列出所安装的软件包
dpkg --list
rpm -qa
确定是否安装了一个软件包
dpkg --status package_name
rpm -q package_name
显示所安装软件包的信息
apt-cache show package_name
yum info package_name
查找安装了某个文件的软件包
dpkg --search file_name
yum -qf file_name
ex. rpm -qf /usr/bin/vim
## 存储媒介
mount umount fsck fdisk mkfs fdformat dd genisoimage wodim cdrecord md5sum

/etc/fstab 字段
设备名 挂载点 文件系统类型 选项 频率(dump) 次序(fsck)

音频 CD 和 CD-ROM 不一样， 音频 CD 不包含文件系统，不能被挂载
挂载点就是文件系统树中的一个目录。如果把设备挂载到一个非空目录，将不能看到这个目录中原来的内容，直到卸载这个设备
mount -t iso9660 /dev/hdc /mnt/cdrom

Linux 存储设备名称
/dev/fd* 软盘
/dev/hd* IDE(PATA)
/dev/lp* 打印机
/dev/sd* SCSI 磁盘
/dev/sr* 光盘(CD/DVD 读取器和烧写器)
符号链接 /dev/cdrom, /dev/dev, /dev/floppy 
创建新的文件系统
1. 可选创建新的分区布局 2. 创建文件系统
sudo umount /dev/sdb1
sudo fdisk /dev/sdb # Device name, not partition number
sudo mkfs -t ext3 /dev/sdb1 # Partition

测试和修复文件系统
首先卸载
sudo fsck /dev/sdb1

直接把数据移入/出设备


## 网络系统
ftp, lftp, wget
ssh remote-sys 'ls \*' > dirlist.txt # '' 防止在本地 shell 展开
ssh remote-sys 'ls * > dirlist.txt'
传递 X 窗口系统流量
local: ssh -X remote-sys
remote: xload

OpenSSH: scp, sftp

## 查找文件
locate, updatedb
find:
文件类型测试条件
b, c, d, f, l(symbolic link)
大小单位
b, default, 512B
c, 字节
w, 字
k, M, G

测试条件:
-cmin n, -n, +n
-cnewer file
-ctime n
-empty
-group name
-iname pattern, ignore case
-inum n, match inode
-mmin n
-mtime n
-name pattern
-newer file
-nouser
-nogroup
-perm mode
-samefile name
-size n
-type c
-user name

find ~ \( -type f -not -perm 0600 \) -or \( -type d -not -perm 0700 \) 
预定义的操作:
-delete, -ls, -print, -quit
用户定义的行为
-exec command {};
ex. -exec rm '{}' ';'
交互 -ok replace -exec
find ~ -type f -name 'foo*' -ok ls -l '{}' ';'
提高效率:
-exec 每次找到一个匹配的文件，会启动一个新的指定命令的实例
1. ; -> +
find ~ -type f -name 'foo*' -exec ls -l '{}' +
2. xargs
从标准输入接受输入，并把输入转换为一个特定命令的参数列表
find ~ -type f -name 'foo*' -print | xargs ls -l

find playground \( -type f -not -perm 0600 -exec chmod 0600 '{}' ';' \) -or \( -type d -not -perm 0711 -exec chmod 0700 '{}' ';' \)

选项:
-depth 先处理目录中的文件，再处理目录自身。指定 -delete 行为时，自动应用此选项
-maxdepth levels 
-mindepth levels
-mount 不要搜索挂载到其他文件系统上的目录
-noleaf 用于搜索 DOS/Windows, CD/ROMS

## 归档和备份
gzip 压缩版替代原始文件， gunzip
-c stdout, keep original file
-d decompress
-f force, even compressed file exists
-l list every compressed file
-r recursive for directory
-t test compressed file integrity
-v verbose
-number 1-9

ls -l /etc | gzip > foo.txt.gz
gzip foo.txt # foo.txt.gz
gunzip -c foo.txt.gz | less # or zcat foo.txt.gz | less # gunzip -c zless

bzip2, bzcat, bzless

tar
操作模式
c, x, r(追加文件到归档文件的末尾), t(list content) 需首先指定模式，然后是其他的选项
tar cf playground.tar playground
末尾添加路径名，恢复指定的文件
结合 find 
find playground -name 'file-A' -exec tar rf playground.tar '{}' '+'

标准输入和标准输出
find playground -name 'file-A' | tar cf - --files-from=- | gzip > playground.tgz
- 表示标准输入或标准输出

find playground -name 'file-A' | tar czf playground.tgz -T -
find playground -name 'file-A' | tar cjf playground.tbz -T -

网络传输文件
ssh remote-sys 'tar cf - Documents' | tar xf -

zip:
zip -r playground.zip playground
-r 
find playground -name 'file-A' | zip -@ file-A.zip
ls -l /etc/ | zip ls-etc.zip -
unzip -p ls-etc.zip | less

同步文件和目录
sudo rsync -av --delete /etc /home /usr/local /media/BigDisk/backup

## 文本处理
cat -A(显示空格), -n(行号), -s(禁止多余空行)
cat << EOF > output-file


## Linux 入门教程

ctrl + Z 暂停当前进程， fg %n 恢复
~ $ ping localhost
PING localhost(localhost (::1)) 56 data bytes
64 bytes from localhost (::1): icmp_seq=1 ttl=64 time=0.036 ms
64 bytes from localhost (::1): icmp_seq=2 ttl=64 time=0.057 ms
64 bytes from localhost (::1): icmp_seq=3 ttl=64 time=0.061 ms
^Z
[1]+  Stopped                 ping localhost
~ $ fg %1
ping localhost
64 bytes from localhost (::1): icmp_seq=4 ttl=64 time=0.052 ms
64 bytes from localhost (::1): icmp_seq=5 ttl=64 time=0.058 ms
64 bytes from localhost (::1): icmp_seq=6 ttl=64 time=0.058 ms


cp -d, --no-dereference, --preserve=links 拷贝软链接而不是目标文件

chown -R, chmod -R 递归

umask 0022
文件 666 - 022 = 644
目录 777 - 022 = 755

chattr [+-=] [ASaci] 文件或目录，
+-= ：分别为增加、减少、设定

A：增加该属性后，文件或目录的atime将不可被修改；

S：增加该属性后，会将数据同步写入磁盘中；

a：增加该属性后，只能追加不能删除，非root用户不能设定该属性；

c：自动压缩该文件，读取时会自动解压；

i：增加后，使文件不能被删除、重命名、设定连接、写入、新增数据；

lsattr -aR, -a 列出隐藏文件, -R 递归



语法： find [路径] [参数] 下面介绍几个笔者经常用的参数

-atime +n ：访问或执行时间大于n天的文件

-ctime +n ：写入、更改inode属性（例如更改所有者、权限或者连接）时间大于n天的文件

-mtime +n ：写入时间大于n天的文件

文件的 Access time，atime 是在读取文件或者执行文件时更改的。文件的 Modified time，mtime 是在写入文件时随文件内容的更改而更改的。文件的 Create time，ctime 是在写入文件、更改所有者、权限或链接设置时随 Inode 的内容更改而更改的。 因此，更改文件的内容即会更改 mtime 和 ctime，但是文件的 ctime 可能会在 mtime 未发生任何变化时更改，例如，更改了文件的权限，但是文件内容没有变化。 如何获得一个文件的atime mtime 以及ctime ？

ls -l 命令可用来列出文件的 atime、ctime 和 mtime。

ls -lc filename         列出文件的 ctime

ls -lu filename         列出文件的 atime

ls -l filename          列出文件的 mtime    

atime不一定在访问文件之后被修改，因为：使用ext3文件系统的时候，如果在mount的时候使用了noatime参数那么就不会更新atime的信息。而这是加了 noatime 取消了, 不代表真实情況。反正, 這三個 time stamp 都放在 inode 中。若 mtime, atime 修改inode 就一定會改, 既然 inode 改了, 那 ctime 也就跟著要改了。


fsck 检查磁盘坏道，一般先卸载磁盘

/etc/fstab
文件系统，挂载点，文件系统类型， 选项(defaults)，是否 dump，开机是否自检磁盘(1, 2都是自检，0不自检)
第四列详解：
async/sync ：async表示和磁盘和内存不同步，系统每隔一段时间把内存数据写入磁盘中，而sync则会时时同步内存和磁盘中数据；
auto/noauto ：开机自动挂载/不自动挂载；
default：按照大多数永久文件系统的缺省值设置挂载定义，它包含了rw, suid, dev, exec, auto, nouser,async ；
ro：按只读权限挂载；
rw：按可读可写权限挂载；
exec/noexec ：允许/不允许可执行文件执行，但千万不要把根分区挂载为noexec，那就无法使用系统了，连mount命令都无法使用了，这时只有重新做系统了；
user/nouser ：允许/不允许root外的其他用户挂载分区，为了安全考虑，请用nouser ；
suid/nosuid ：允许/不允许分区有suid属性，一般设置nosuid ；
usrquota ：启动使用者磁盘配额模式，磁盘配额相关内容在后续章节会做介绍；
grpquota ：启动群组磁盘配额模式；

mount -o remount,ro,sync /dev/sda1 /test1 无法向 sda1 分区写入数据
mount -o remount /dev/sda1 /test1 重新挂载，不加任何选项，默认 defaults 挂载

blkid 磁盘的 UUID
$ blkid [/dev/sda1]

建立 swap 文件
1. 空文件 dd if=/dev/zero of=$swapfile bs count
2. setting up swapspace, mkswap $swapfile
3. using swapspace, swapon $swapfile, swapoff $swapfile

quota
1. 打开磁盘的 quota 功能
/etcfstab defaults,usrquota,grpquota
umount /home
mount -a
或者 mount -o remount -a





