1.11 内联函数
定义时声明 inline

1.14 函数的默认参数
默认参数放在形参列表的最后面，值可以指定字面常量或者使用变量表达式
float d = 1.0
void foo(float a=d+1.0){
    // function body here.
}
简单点，函数定义时指定默认参数

1.16 函数重载 function overloading
函数名字相同，参数列表不同(参数个数，类型，顺序不同)。返回值不能作为重载的依据。
#include <iostream>
using namespace std;

void Swap(int a, int b){
	cout << b << " " << a << endl;
}

void Swap(float a, float b){
	cout << b << " " << a << endl;
}

int main(){
	int x, y;
	cin >> x >> y;
	Swap(x, y);
	
	float x1, y1;
	cin >> x1 >> y1;
	Swap(x1, y1);

}

2.1 类的定义和对象的创建
类通常定义在函数外面
class Stu{
public:    
    int x;
    void foo(){
        cout << x;
    }
};
int main(){
    // 在栈上创建对象
    Stu ming;
    ming.x = 20;
    ming.foo();

    // 使用对象指针
    Stu *pming = &ming;
    pming->foo(); 

    // 堆上创建对象. new 在堆上创建出来的对象是匿名的，需要指针指向它。
    // 栈内存是程序自动管理的，不能使用 delete 删除。堆内存有程序员管理， new 和 delete
    // 成对出现。
    Stu *phan = new Stu;
    phan->x = 30;
    phan->foo();
}

2.2 类的成员变量和成员函数
在类体中定义的成员函数会自动成为内联函数。内联函数一般不是我们期望的(除非成员函数比较
短小)。所以建议在类体内部对成员函数作声明，在外部定义。
如果希望函数定义在类外部，又希望是内联函数。定义时加 inline 关键字。

// 外部
void Stu::foo(){
    cout << x << endl;
}

2.3 类成员的访问权限和封装
类内部。无访问权限的限制
类外部。对象访问成员，可以访问 public 属性成员。
类的声明和成员函数的定义都是类定义的一部分。通常将类声明放在头文件中，将成员函数
的定义放在源文件中。

2.6 构造函数
名字和类名相同，没有返回值，没有变量来接收返回值。public 属性。
class Stu{
private:
    char *mname;
    int mage;
public:
    Stu(char *, int);
    void greet(){
        cout << mname << endl;
    }
};

Stu::Stu(char *name, int age){
    mname = name;
    mage = age;
}

int main(){
    Stu han("Han", 20);
    han.greet();
    return 0;
}

构造函数重载

调用没有参数的构造函数，可以省略括号 Stu han(); Stu han; Stu *phan = new Stu(); Stu *phan = new Stu;








