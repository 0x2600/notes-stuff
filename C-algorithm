## charpter 3 递归

本章内容:
基本递归
尾递归

### 基本递归
阶乘举例
1. 迭代法
2. 递归法
递归阶段和回归阶段

C程序在内存中的组织方式
代码段，静态数据区(全局变量，静态局部变量)，堆(动态分配的存储空间,
如malloc,realloc)和栈(函数调用信息)

栈，当调用了一个函数时，栈中会分配一块空间来保存与这个调用相关的信息，每一个调用都被当作是活跃的，那块空间被称为活跃记录，或者栈帧。
栈是用来存储函数调用信息的绝好方案，由于其后进先出的特点。缺点，栈空间直到函数返回时才释放，可能会占用相当大的空间。生成和销毁活跃记录需要耗费一定的时间。因此当函数调用的开销很大时，需要考虑采用迭代的方案。

尾递归
尾递归的 fact 函数
f(n, a) = a, n=0, n=1
		= f(n-1, n*a), n>1

## charpter 4 算法分析
本章内容:
最坏情况分析
O 表示法
计算的复杂度

1. 最坏情况分析
原因:
最佳情况下的性能无意义。平均情况很难界定。最坏情况可以告诉我们算法性能的上限。

2. O 表示法
简单规则:
常数项忽略不计。常数因子忽略不计。考虑高阶项的因子。

常数项用 O(1) 表示。O(c) = O(1)
常量因子往往被忽略。O(cT)=cO(T)=O(T)
加法运算取最大值。O(T1)+O(T2) = O(T1+T2)=max(O(T1), O(T2))
乘法结果不需要改变，但往往可以用更紧凑的方法表示。O(T1)O(T2) = O(T1T2)

3. 计算的复杂度


